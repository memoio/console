{"version":3,"file":"static/js/6549.bc76401b.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/PredefinedList/PredefinedList.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx","screens/Console/Policies/PolicySelectors.tsx","screens/Console/Policies/SetPolicy.tsx","../node_modules/@mui/icons-material/Close.js"],"sourcesContent":["import React, { Fragment } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { predefinedList } from \"../common/styleLibrary\";\n\ninterface IPredefinedList {\n  classes: any;\n  label?: string;\n  content: any;\n  multiLine?: boolean;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...predefinedList,\n  });\n\nconst PredefinedList = ({\n  classes,\n  label = \"\",\n  content,\n  multiLine = false,\n}: IPredefinedList) => {\n  return (\n    <Fragment>\n      <Grid className={classes.prefinedContainer}>\n        {label !== \"\" && (\n          <Grid item xs={12} className={classes.predefinedTitle}>\n            {label}\n          </Grid>\n        )}\n        <Grid item xs={12} className={classes.predefinedList}>\n          <Grid\n            item\n            xs={12}\n            className={\n              multiLine ? classes.innerContentMultiline : classes.innerContent\n            }\n          >\n            {content}\n          </Grid>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(PredefinedList);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport { Dialog, DialogContent, DialogTitle } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  deleteDialogStyles,\n  snackBarCommon,\n} from \"../FormComponents/common/styleLibrary\";\nimport { AppState } from \"../../../../store\";\nimport { snackBarMessage } from \"../../../../types\";\nimport { setModalSnackMessage } from \"../../../../actions\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport MainError from \"../MainError/MainError\";\n\ninterface IModalProps {\n  classes: any;\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  modalSnackMessage?: snackBarMessage;\n  noContentPadding?: boolean;\n  setModalSnackMessage: typeof setModalSnackMessage;\n  titleIcon?: React.ReactNode;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n    root: {\n      \"& .MuiPaper-root\": {\n        padding: \"0 2rem 2rem 1rem\",\n      },\n    },\n    content: {\n      padding: 25,\n      paddingBottom: 0,\n    },\n    customDialogSize: {\n      width: \"100%\",\n      maxWidth: 765,\n    },\n    ...snackBarCommon,\n  });\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  classes,\n  wideLimit = true,\n  modalSnackMessage,\n  noContentPadding,\n  setModalSnackMessage,\n  titleIcon = null,\n}: IModalProps) => {\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  useEffect(() => {\n    setModalSnackMessage(\"\");\n  }, [setModalSnackMessage]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    setModalSnackMessage(\"\");\n  };\n\n  const customSize = wideLimit\n    ? {\n        classes: {\n          paper: classes.customDialogSize,\n        },\n      }\n    : { maxWidth: \"lg\" as const, fullWidth: true };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (\n      modalSnackMessage.detailedErrorMsg === \"\" ||\n      modalSnackMessage.detailedErrorMsg.length < 5\n    ) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <Dialog\n      open={modalOpen}\n      classes={classes}\n      {...customSize}\n      scroll={\"paper\"}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <MainError isModal={true} />\n      <Snackbar\n        open={openSnackbar}\n        className={classes.snackBarModal}\n        onClose={() => {\n          closeSnackBar();\n        }}\n        message={message}\n        ContentProps={{\n          className: `${classes.snackBar} ${\n            modalSnackMessage && modalSnackMessage.type === \"error\"\n              ? classes.errorSnackBar\n              : \"\"\n          }`,\n        }}\n        autoHideDuration={\n          modalSnackMessage && modalSnackMessage.type === \"error\" ? 10000 : 5000\n        }\n      />\n      <DialogContent className={noContentPadding ? \"\" : classes.content}>\n        {children}\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  modalSnackMessage: state.system.modalSnackBar,\n});\n\nconst connector = connect(mapState, {\n  setModalSnackMessage,\n});\n\nexport default withStyles(styles)(connector(ModalWrapper));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { LinearProgress } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport { policySort } from \"../../../utils/sortFunctions\";\nimport {\n  actionsTray,\n  searchField,\n  selectorsCommon,\n  tableStyles,\n} from \"../Common/FormComponents/common/styleLibrary\";\nimport { PolicyList } from \"./types\";\nimport { setModalErrorSnackMessage } from \"../../../actions\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport api from \"../../../common/api\";\nimport TableWrapper from \"../Common/TableWrapper/TableWrapper\";\nimport SearchBox from \"../Common/SearchBox\";\n\ninterface ISelectPolicyProps {\n  classes: any;\n  selectedPolicy?: string[];\n  setSelectedPolicy: any;\n  setModalErrorSnackMessage: typeof setModalErrorSnackMessage;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    noFound: {\n      textAlign: \"center\",\n      padding: \"10px 0\",\n    },\n    searchBox: {\n      flex: 1,\n    },\n    fieldLabel: {\n      fontWeight: 400,\n      width: 160,\n      marginRight: 10,\n    },\n    tableBlock: {\n      ...tableStyles.tableBlock,\n    },\n    filterBox: {\n      display: \"flex\",\n      marginBottom: 15,\n      alignItems: \"center\",\n      \"& span\": {\n        fontSize: 14,\n      },\n    },\n    ...searchField,\n    ...tableStyles,\n    ...actionsTray,\n    ...selectorsCommon,\n  });\n\nconst PolicySelectors = ({\n  classes,\n  selectedPolicy = [],\n  setSelectedPolicy,\n  setModalErrorSnackMessage,\n}: ISelectPolicyProps) => {\n  // Local State\n  const [records, setRecords] = useState<any[]>([]);\n  const [loading, isLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n\n  const fetchPolicies = useCallback(() => {\n    isLoading(true);\n\n    api\n      .invoke(\"GET\", `/api/v1/policies?limit=1000`)\n      .then((res: PolicyList) => {\n        const policies = res.policies === null ? [] : res.policies;\n        isLoading(false);\n        setRecords(policies.sort(policySort));\n      })\n      .catch((err: ErrorResponseHandler) => {\n        isLoading(false);\n        setModalErrorSnackMessage(err);\n      });\n  }, [setModalErrorSnackMessage]);\n\n  //Effects\n  useEffect(() => {\n    isLoading(true);\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      fetchPolicies();\n    }\n  }, [loading, fetchPolicies]);\n\n  const selectionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = e.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: string[] = [...selectedPolicy]; // We clone the checkedUsers array\n\n    if (checked) {\n      // If the user has checked this field we need to push this to checkedUsersList\n      elements.push(value);\n    } else {\n      // User has unchecked this field, we need to remove it from the list\n      elements = elements.filter((element) => element !== value);\n    }\n    // remove empty values\n    elements = elements.filter((element) => element !== \"\");\n\n    setSelectedPolicy(elements);\n  };\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.name.includes(filter)\n  );\n\n  return (\n    <React.Fragment>\n      <Grid item xs={12}>\n        {loading && <LinearProgress />}\n        {records.length > 0 ? (\n          <React.Fragment>\n            <Grid item xs={12} className={classes.filterBox}>\n              <span className={classes.fieldLabel}>Assign Policies</span>\n              <div className={classes.searchBox}>\n                <SearchBox\n                  placeholder=\"Filter Policy\"\n                  onChange={(value) => {\n                    setFilter(value);\n                  }}\n                  value={filter}\n                />\n              </div>\n            </Grid>\n            <Grid item xs={12} className={classes.tableBlock}>\n              <TableWrapper\n                columns={[{ label: \"Policy\", elementKey: \"name\" }]}\n                onSelect={selectionChanged}\n                selectedItems={selectedPolicy}\n                isLoading={loading}\n                records={filteredRecords}\n                entityName=\"Policies\"\n                idField=\"name\"\n                customPaperHeight={classes.multiSelectTable}\n              />\n            </Grid>\n          </React.Fragment>\n        ) : (\n          <div className={classes.noFound}>No Policies Available</div>\n        )}\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nconst connector = connect(null, {\n  setModalErrorSnackMessage,\n});\n\nexport default withStyles(styles)(connector(PolicySelectors));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport get from \"lodash/get\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Button, LinearProgress } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  modalBasic,\n  spacingUtils,\n  tableStyles,\n} from \"../Common/FormComponents/common/styleLibrary\";\nimport { User } from \"../Users/types\";\nimport { setModalErrorSnackMessage } from \"../../../actions\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\nimport api from \"../../../common/api\";\nimport PolicySelectors from \"./PolicySelectors\";\nimport PredefinedList from \"../Common/FormComponents/PredefinedList/PredefinedList\";\n\ninterface ISetPolicyProps {\n  classes: any;\n  closeModalAndRefresh: () => void;\n  selectedUser: User | null;\n  selectedGroup: string | null;\n  open: boolean;\n  setModalErrorSnackMessage: typeof setModalErrorSnackMessage;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...modalBasic,\n    ...spacingUtils,\n    tableBlock: {\n      ...tableStyles.tableBlock,\n      marginTop: 15,\n    },\n    buttonContainer: {\n      textAlign: \"right\",\n      marginTop: \".9rem\",\n    },\n  });\n\nconst SetPolicy = ({\n  classes,\n  closeModalAndRefresh,\n  selectedUser,\n  selectedGroup,\n  setModalErrorSnackMessage,\n  open,\n}: ISetPolicyProps) => {\n  //Local States\n  const [loading, setLoading] = useState<boolean>(false);\n  const [actualPolicy, setActualPolicy] = useState<string[]>([]);\n  const [selectedPolicy, setSelectedPolicy] = useState<string[]>([]);\n\n  const setPolicyAction = () => {\n    let entity = \"user\";\n    let value = null;\n    if (selectedGroup !== null) {\n      entity = \"group\";\n      value = selectedGroup;\n    } else {\n      if (selectedUser !== null) {\n        value = selectedUser.accessKey;\n      }\n    }\n\n    setLoading(true);\n\n    api\n      .invoke(\"PUT\", `/api/v1/set-policy`, {\n        name: selectedPolicy,\n        entityName: value,\n        entityType: entity,\n      })\n      .then(() => {\n        setLoading(false);\n        closeModalAndRefresh();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setLoading(false);\n        setModalErrorSnackMessage(err);\n      });\n  };\n\n  const fetchGroupInformation = () => {\n    if (selectedGroup) {\n      api\n        .invoke(\"GET\", `/api/v1/group?name=${encodeURI(selectedGroup)}`)\n        .then((res: any) => {\n          const groupPolicy: String = get(res, \"policy\", \"\");\n          setActualPolicy(groupPolicy.split(\",\"));\n          setSelectedPolicy(groupPolicy.split(\",\"));\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setModalErrorSnackMessage(err);\n          setLoading(false);\n        });\n    }\n  };\n\n  const resetSelection = () => {\n    setSelectedPolicy(actualPolicy);\n  };\n\n  useEffect(() => {\n    if (open) {\n      if (selectedGroup !== null) {\n        fetchGroupInformation();\n        return;\n      }\n\n      const userPolicy: string[] = get(selectedUser, \"policy\", []);\n      setActualPolicy(userPolicy);\n      setSelectedPolicy(userPolicy);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open, selectedGroup, selectedUser]);\n\n  const userName = get(selectedUser, \"accessKey\", \"\");\n\n  return (\n    <ModalWrapper\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      modalOpen={open}\n      title=\"Set Policies\"\n    >\n      <Grid item xs={12}>\n        <PredefinedList\n          label={`Selected ${selectedGroup !== null ? \"Group\" : \"User\"}`}\n          content={selectedGroup !== null ? selectedGroup : userName}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <PredefinedList\n          label={\"Current Policy\"}\n          content={actualPolicy.join(\", \")}\n        />\n      </Grid>\n      <div className={classes.tableBlock}>\n        <PolicySelectors\n          selectedPolicy={selectedPolicy}\n          setSelectedPolicy={setSelectedPolicy}\n        />\n      </div>\n      <Grid item xs={12} className={classes.buttonContainer}>\n        <Button\n          type=\"button\"\n          variant=\"outlined\"\n          color=\"primary\"\n          className={classes.spacerRight}\n          onClick={resetSelection}\n        >\n          Reset\n        </Button>\n        <Button\n          type=\"button\"\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={loading}\n          onClick={setPolicyAction}\n        >\n          Save\n        </Button>\n      </Grid>\n      {loading && (\n        <Grid item xs={12}>\n          <LinearProgress />\n        </Grid>\n      )}\n    </ModalWrapper>\n  );\n};\n\nconst mapDispatchToProps = {\n  setModalErrorSnackMessage,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default withStyles(styles)(connector(SetPolicy));\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');\n\nexports.default = _default;"],"names":["withStyles","theme","createStyles","predefinedList","classes","label","content","multiLine","Fragment","className","prefinedContainer","item","xs","predefinedTitle","innerContentMultiline","innerContent","connector","connect","state","modalSnackMessage","system","modalSnackBar","setModalSnackMessage","deleteDialogStyles","root","padding","paddingBottom","customDialogSize","width","maxWidth","snackBarCommon","onClose","modalOpen","title","children","wideLimit","noContentPadding","titleIcon","useState","openSnackbar","setOpenSnackbar","useEffect","message","type","customSize","paper","fullWidth","detailedErrorMsg","length","open","scroll","event","reason","titleText","closeContainer","closeButton","onClick","disableRipple","size","isModal","snackBarModal","ContentProps","snackBar","errorSnackBar","autoHideDuration","setModalErrorSnackMessage","noFound","textAlign","searchBox","flex","fieldLabel","fontWeight","marginRight","tableBlock","tableStyles","filterBox","display","marginBottom","alignItems","fontSize","searchField","actionsTray","selectorsCommon","selectedPolicy","setSelectedPolicy","records","setRecords","loading","isLoading","filter","setFilter","fetchPolicies","useCallback","api","then","res","policies","sort","policySort","catch","err","filteredRecords","elementItem","name","includes","placeholder","onChange","value","columns","elementKey","onSelect","e","targetD","target","checked","elements","push","element","selectedItems","entityName","idField","customPaperHeight","multiSelectTable","mapDispatchToProps","modalBasic","spacingUtils","marginTop","buttonContainer","closeModalAndRefresh","selectedUser","selectedGroup","setLoading","actualPolicy","setActualPolicy","encodeURI","groupPolicy","get","split","userPolicy","userName","join","variant","color","spacerRight","disabled","entity","accessKey","entityType","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}
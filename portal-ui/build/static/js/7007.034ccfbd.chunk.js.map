{"version":3,"file":"static/js/7007.034ccfbd.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/DeleteBucketTagModal.tsx","screens/Console/Common/ModalWrapper/ConfirmDialog.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport get from \"lodash/get\";\nimport { connect } from \"react-redux\";\nimport { DialogContentText } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { modalBasic } from \"../../Common/FormComponents/common/styleLibrary\";\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport { AppState } from \"../../../../store\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport useApi from \"../../Common/Hooks/useApi\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport { ConfirmDeleteIcon } from \"../../../../icons\";\n\ninterface IDeleteBucketTagModal {\n  deleteOpen: boolean;\n  currentTags: any;\n  bucketName: string;\n  selectedTag: string[];\n  onCloseAndUpdate: (refresh: boolean) => void;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...modalBasic,\n  });\n\nconst DeleteBucketTagModal = ({\n  deleteOpen,\n  currentTags,\n  selectedTag,\n  onCloseAndUpdate,\n  bucketName,\n  setErrorSnackMessage,\n  classes,\n}: IDeleteBucketTagModal) => {\n  const [tagKey, tagLabel] = selectedTag;\n\n  const onDelSuccess = () => onCloseAndUpdate(true);\n  const onDelError = (err: ErrorResponseHandler) => setErrorSnackMessage(err);\n  const onClose = () => onCloseAndUpdate(false);\n\n  const [deleteLoading, invokeDeleteApi] = useApi(onDelSuccess, onDelError);\n\n  if (!selectedTag) {\n    return null;\n  }\n\n  const onConfirmDelete = () => {\n    const cleanObject = { ...currentTags };\n    delete cleanObject[tagKey];\n\n    invokeDeleteApi(\"PUT\", `/api/v1/buckets/${bucketName}/tags`, {\n      tags: cleanObject,\n    });\n  };\n\n  return (\n    <ConfirmDialog\n      title={`Delete Tag`}\n      confirmText={\"Delete\"}\n      isOpen={deleteOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={deleteLoading}\n      onConfirm={onConfirmDelete}\n      onClose={onClose}\n      confirmationContent={\n        <DialogContentText>\n          Are you sure you want to delete the tag{\" \"}\n          <b className={classes.wrapText}>\n            {tagKey} : {tagLabel}\n          </b>{\" \"}\n          ?\n        </DialogContentText>\n      }\n    />\n  );\n};\n\nconst mapStateToProps = ({ system }: AppState) => ({\n  distributedSetup: get(system, \"distributedSetup\", false),\n});\n\nconst mapDispatchToProps = {\n  setErrorSnackMessage,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport default withStyles(styles)(connector(DeleteBucketTagModal));\n","import React from \"react\";\nimport {\n  Button,\n  ButtonProps,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n} from \"@mui/material\";\nimport { LoadingButton } from \"@mui/lab\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { deleteDialogStyles } from \"../FormComponents/common/styleLibrary\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n  });\n\ntype ConfirmDialogProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n  onCancel?: () => void;\n  onConfirm: () => void;\n  classes?: any;\n  title: string;\n  isLoading?: boolean;\n  confirmationContent: React.ReactNode | React.ReactNode[];\n  cancelText?: string;\n  confirmText?: string;\n  confirmButtonProps?: Partial<ButtonProps>;\n  cancelButtonProps?: Partial<ButtonProps>;\n  titleIcon?: React.ReactNode;\n};\n\nconst ConfirmDialog = ({\n  isOpen = false,\n  onClose,\n  onCancel,\n  onConfirm,\n  classes = {},\n  title = \"\",\n  isLoading,\n  confirmationContent,\n  cancelText = \"Cancel\",\n  confirmText = \"Confirm\",\n  confirmButtonProps = {},\n  cancelButtonProps = {},\n  titleIcon = null,\n}: ConfirmDialogProps) => {\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n      sx={{\n        \"& .MuiPaper-root\": {\n          padding: \"1rem 2rem 2rem 1rem\",\n        },\n      }}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <DialogContent className={classes.content}>\n        {confirmationContent}\n      </DialogContent>\n      <DialogActions className={classes.actions}>\n        <Button\n          className={classes.cancelButton}\n          onClick={onCancel || onClose}\n          disabled={isLoading}\n          type=\"button\"\n          {...cancelButtonProps}\n          variant=\"outlined\"\n          color=\"primary\"\n          id={\"confirm-cancel\"}\n        >\n          {cancelText}\n        </Button>\n\n        <LoadingButton\n          className={classes.confirmButton}\n          type=\"button\"\n          onClick={onConfirm}\n          loading={isLoading}\n          disabled={isLoading}\n          variant=\"outlined\"\n          color=\"secondary\"\n          loadingPosition=\"start\"\n          startIcon={<React.Fragment />}\n          autoFocus\n          id={\"confirm-ok\"}\n          {...confirmButtonProps}\n        >\n          {confirmText}\n        </LoadingButton>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default withStyles(styles)(ConfirmDialog);\n"],"names":["mapDispatchToProps","setErrorSnackMessage","connector","connect","system","distributedSetup","get","withStyles","theme","createStyles","modalBasic","deleteOpen","currentTags","selectedTag","onCloseAndUpdate","bucketName","classes","tagKey","tagLabel","useApi","err","deleteLoading","invokeDeleteApi","title","confirmText","isOpen","titleIcon","isLoading","onConfirm","cleanObject","tags","onClose","confirmationContent","className","wrapText","deleteDialogStyles","onCancel","cancelText","confirmButtonProps","cancelButtonProps","open","event","reason","root","sx","padding","titleText","closeContainer","closeButton","onClick","disableRipple","size","content","actions","cancelButton","disabled","type","variant","color","id","confirmButton","loading","loadingPosition","startIcon","autoFocus"],"sourceRoot":""}
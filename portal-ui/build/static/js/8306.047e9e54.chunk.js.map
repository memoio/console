{"version":3,"file":"static/js/8306.047e9e54.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/FileSelector/FileSelector.tsx","screens/Console/Common/FormComponents/FileSelector/utils.ts","screens/Console/Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper.tsx","screens/Console/Common/FormComponents/InputBoxWrapper/InputBoxWrapper.tsx","screens/Console/Common/FormComponents/RadioGroupSelector/RadioGroupSelector.tsx","screens/Console/Common/ModalWrapper/ConfirmDialog.tsx","screens/Console/Tenants/TenantDetails/TenantEncryption.tsx","screens/shared/ErrorBlock.tsx","utils/validationFunctions.ts","../node_modules/@mui/icons-material/AttachFile.js","../node_modules/@mui/icons-material/Cancel.js","../node_modules/@mui/icons-material/Close.js"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport get from \"lodash/get\";\nimport { Grid, InputLabel, Tooltip } from \"@mui/material\";\nimport IconButton from \"@mui/material/IconButton\";\nimport AttachFileIcon from \"@mui/icons-material/AttachFile\";\nimport CancelIcon from \"@mui/icons-material/Cancel\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  fieldBasic,\n  fileInputStyles,\n  tooltipHelper,\n} from \"../common/styleLibrary\";\nimport { fileProcess } from \"./utils\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\nimport ErrorBlock from \"../../../../shared/ErrorBlock\";\n\ninterface InputBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: string, i: string) => void;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  required?: boolean;\n  error?: string;\n  accept?: string;\n  value?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    valueString: {\n      maxWidth: 350,\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      marginTop: 2,\n    },\n    fileInputField: {\n      margin: \"13px 0\",\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    ...fileInputStyles,\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      fontWeight: \"normal\",\n    },\n    textBoxContainer: {\n      ...fieldBasic.textBoxContainer,\n      maxWidth: \"100%\",\n      border: \"1px solid #eaeaea\",\n      paddingLeft: \"15px\",\n    },\n  });\n\nconst FileSelector = ({\n  label,\n  classes,\n  onChange,\n  id,\n  name,\n  disabled = false,\n  tooltip = \"\",\n  required,\n  error = \"\",\n  accept = \"\",\n  value = \"\",\n}: InputBoxProps) => {\n  const [showFileSelector, setShowSelector] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Grid\n        item\n        xs={12}\n        className={`${classes.fileInputField} ${classes.fieldBottom} ${\n          classes.fieldContainer\n        } ${error !== \"\" ? classes.errorInField : \"\"}`}\n      >\n        {label !== \"\" && (\n          <InputLabel\n            htmlFor={id}\n            className={`${error !== \"\" ? classes.fieldLabelError : \"\"} ${\n              classes.inputLabel\n            }`}\n          >\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        {showFileSelector || value === \"\" ? (\n          <div className={classes.textBoxContainer}>\n            <input\n              type=\"file\"\n              name={name}\n              onChange={(e) => {\n                const fileName = get(e, \"target.files[0].name\", \"\");\n                fileProcess(e, (data: any) => {\n                  onChange(data, fileName);\n                });\n              }}\n              accept={accept}\n              required={required}\n              disabled={disabled}\n              className={classes.fileInputField}\n            />\n\n            {value !== \"\" && (\n              <IconButton\n                color=\"primary\"\n                aria-label=\"upload picture\"\n                component=\"span\"\n                onClick={() => {\n                  setShowSelector(false);\n                }}\n                disableRipple={false}\n                disableFocusRipple={false}\n                size=\"small\"\n              >\n                <CancelIcon />\n              </IconButton>\n            )}\n\n            {error !== \"\" && <ErrorBlock errorMessage={error} />}\n          </div>\n        ) : (\n          <div className={classes.fileReselect}>\n            <div className={classes.valueString}>{value}</div>\n            <IconButton\n              color=\"primary\"\n              aria-label=\"upload picture\"\n              component=\"span\"\n              onClick={() => {\n                setShowSelector(true);\n              }}\n              disableRipple={false}\n              disableFocusRipple={false}\n              size=\"small\"\n            >\n              <AttachFileIcon />\n            </IconButton>\n          </div>\n        )}\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(FileSelector);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nexport const fileProcess = (evt: any, callback: any) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n\n  reader.onload = () => {\n    // reader.readAsDataURL(file) output will be something like: data:application/x-x509-ca-cert;base64,LS0tLS1CRUdJTiBDRVJUSU\n    // we care only about the actual base64 part (everything after \"data:application/x-x509-ca-cert;base64,\")\n    const fileBase64 = reader.result;\n    if (fileBase64) {\n      const fileArray = fileBase64.toString().split(\"base64,\");\n\n      if (fileArray.length === 2) {\n        callback(fileArray[1]);\n      }\n    }\n  };\n};\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { InputLabel, Switch, Tooltip, Typography } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport { actionsTray, fieldBasic } from \"../common/styleLibrary\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\nimport clsx from \"clsx\";\nimport { InputProps as StandardInputProps } from \"@mui/material/Input/Input\";\n\ninterface IFormSwitch {\n  label?: string;\n  classes: any;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  value: string | boolean;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  description?: string;\n  index?: number;\n  checked: boolean;\n  switchOnly?: boolean;\n  indicatorLabels?: string[];\n  extraInputProps?: StandardInputProps[\"inputProps\"];\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    divContainer: {\n      marginBottom: 20,\n    },\n    indicatorLabelOn: {\n      fontWeight: \"bold\",\n      color: \"#081C42 !important\",\n    },\n    indicatorLabel: {\n      fontSize: 12,\n      color: \"#E2E2E2\",\n      margin: \"0 8px 0 10px\",\n    },\n    fieldDescription: {\n      marginTop: 4,\n      color: \"#999999\",\n    },\n    tooltip: {\n      fontSize: 16,\n    },\n    ...actionsTray,\n    ...fieldBasic,\n  });\n\nconst StyledSwitch = withStyles((theme) => ({\n  root: {\n    width: 50,\n    height: 24,\n    padding: 0,\n    margin: 0,\n  },\n  switchBase: {\n    padding: 1,\n    \"&$checked\": {\n      transform: \"translateX(24px)\",\n      color: theme.palette.common.white,\n      \"& + $track\": {\n        backgroundColor: \"#4CCB92\",\n        boxShadow: \"inset 0px 1px 4px rgba(0,0,0,0.1)\",\n        opacity: 1,\n        border: \"none\",\n      },\n    },\n    \"&$focusVisible $thumb\": {\n      color: \"#4CCB92\",\n      border: \"6px solid #fff\",\n    },\n  },\n  thumb: {\n    width: 22,\n    height: 22,\n    backgroundColor: \"#FAFAFA\",\n    border: \"2px solid #FFFFFF\",\n    marginLeft: 1,\n  },\n  track: {\n    borderRadius: 24 / 2,\n    backgroundColor: \"#E2E2E2\",\n    boxShadow: \"inset 0px 1px 4px rgba(0,0,0,0.1)\",\n    opacity: 1,\n    transition: theme.transitions.create([\"background-color\", \"border\"]),\n  },\n  checked: {},\n  focusVisible: {},\n  switchContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n}))(Switch);\n\nconst FormSwitchWrapper = ({\n  label = \"\",\n  onChange,\n  value,\n  id,\n  name,\n  checked = false,\n  disabled = false,\n  switchOnly = false,\n  tooltip = \"\",\n  description = \"\",\n  classes,\n  indicatorLabels,\n  extraInputProps = {},\n}: IFormSwitch) => {\n  const switchComponent = (\n    <React.Fragment>\n      {!switchOnly && (\n        <span\n          className={clsx(classes.indicatorLabel, {\n            [classes.indicatorLabelOn]: !checked,\n          })}\n        >\n          {indicatorLabels && indicatorLabels.length > 1\n            ? indicatorLabels[1]\n            : \"OFF\"}\n        </span>\n      )}\n      <StyledSwitch\n        checked={checked}\n        onChange={onChange}\n        color=\"primary\"\n        name={name}\n        inputProps={{ \"aria-label\": \"primary checkbox\", ...extraInputProps }}\n        disabled={disabled}\n        disableRipple\n        disableFocusRipple\n        disableTouchRipple\n        value={value}\n        id={id}\n      />\n      {!switchOnly && (\n        <span\n          className={clsx(classes.indicatorLabel, {\n            [classes.indicatorLabelOn]: checked,\n          })}\n        >\n          {indicatorLabels ? indicatorLabels[0] : \"ON\"}\n        </span>\n      )}\n    </React.Fragment>\n  );\n\n  if (switchOnly) {\n    return switchComponent;\n  }\n\n  return (\n    <div className={classes.divContainer}>\n      <Grid container alignItems={\"center\"}>\n        <Grid item xs>\n          <Grid container>\n            <Grid\n              item\n              xs={12}\n              sm={description !== \"\" ? 4 : 10}\n              md={description !== \"\" ? 3 : 9}\n            >\n              {label !== \"\" && (\n                <InputLabel htmlFor={id} className={classes.inputLabel}>\n                  <span>{label}</span>\n                  {tooltip !== \"\" && (\n                    <div className={classes.tooltipContainer}>\n                      <Tooltip title={tooltip} placement=\"top-start\">\n                        <div className={classes.tooltip}>\n                          <HelpIcon />\n                        </div>\n                      </Tooltip>\n                    </div>\n                  )}\n                </InputLabel>\n              )}\n            </Grid>\n            <Grid item xs={12} sm textAlign={\"left\"}>\n              {description !== \"\" && (\n                <Typography component=\"p\" className={classes.fieldDescription}>\n                  {description}\n                </Typography>\n              )}\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Grid\n          item\n          xs={12}\n          sm={2}\n          textAlign={\"right\"}\n          className={classes.switchContainer}\n        >\n          {switchComponent}\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(FormSwitchWrapper);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React from \"react\";\nimport {\n  Grid,\n  IconButton,\n  InputLabel,\n  TextField,\n  TextFieldProps,\n  Tooltip,\n} from \"@mui/material\";\nimport { OutlinedInputProps } from \"@mui/material/OutlinedInput\";\nimport { InputProps as StandardInputProps } from \"@mui/material/Input\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  fieldBasic,\n  inputFieldStyles,\n  tooltipHelper,\n} from \"../common/styleLibrary\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\nimport clsx from \"clsx\";\n\ninterface InputBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onKeyPress?: (e: any) => void;\n  value: string | boolean;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  multiline?: boolean;\n  type?: string;\n  tooltip?: string;\n  autoComplete?: string;\n  index?: number;\n  error?: string;\n  required?: boolean;\n  placeholder?: string;\n  min?: string;\n  max?: string;\n  overlayId?: string;\n  overlayIcon?: any;\n  overlayAction?: () => void;\n  overlayObject?: any;\n  extraInputProps?: StandardInputProps[\"inputProps\"];\n  noLabelMinWidth?: boolean;\n  pattern?: string;\n  autoFocus?: boolean;\n  className?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    textBoxContainer: {\n      flexGrow: 1,\n      position: \"relative\",\n    },\n    overlayAction: {\n      position: \"absolute\",\n      right: 5,\n      top: 6,\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"&.withLabel\": {\n        top: 5,\n      },\n    },\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      fontWeight: \"normal\",\n    },\n  });\n\nconst inputStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    ...inputFieldStyles,\n  })\n);\n\nfunction InputField(props: TextFieldProps) {\n  const classes = inputStyles();\n\n  return (\n    <TextField\n      InputProps={{ classes } as Partial<OutlinedInputProps>}\n      {...props}\n    />\n  );\n}\n\nconst InputBoxWrapper = ({\n  label,\n  onChange,\n  value,\n  id,\n  name,\n  type = \"text\",\n  autoComplete = \"off\",\n  disabled = false,\n  multiline = false,\n  tooltip = \"\",\n  index = 0,\n  error = \"\",\n  required = false,\n  placeholder = \"\",\n  min,\n  max,\n  overlayId,\n  overlayIcon = null,\n  overlayObject = null,\n  extraInputProps = {},\n  overlayAction,\n  noLabelMinWidth = false,\n  pattern = \"\",\n  autoFocus = false,\n  classes,\n  className = \"\",\n  onKeyPress,\n}: InputBoxProps) => {\n  let inputProps: any = { \"data-index\": index, ...extraInputProps };\n\n  if (type === \"number\" && min) {\n    inputProps[\"min\"] = min;\n  }\n\n  if (type === \"number\" && max) {\n    inputProps[\"max\"] = max;\n  }\n\n  if (pattern !== \"\") {\n    inputProps[\"pattern\"] = pattern;\n  }\n\n  return (\n    <React.Fragment>\n      <Grid\n        container\n        className={clsx(\n          className !== \"\" ? className : \"\",\n          error !== \"\" ? classes.errorInField : classes.inputBoxContainer\n        )}\n      >\n        {label !== \"\" && (\n          <InputLabel\n            htmlFor={id}\n            className={\n              noLabelMinWidth ? classes.noMinWidthLabel : classes.inputLabel\n            }\n          >\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        <div className={classes.textBoxContainer}>\n          <InputField\n            id={id}\n            name={name}\n            fullWidth\n            value={value}\n            autoFocus={autoFocus}\n            disabled={disabled}\n            onChange={onChange}\n            type={type}\n            multiline={multiline}\n            autoComplete={autoComplete}\n            inputProps={inputProps}\n            error={error !== \"\"}\n            helperText={error}\n            placeholder={placeholder}\n            className={classes.inputRebase}\n            onKeyPress={onKeyPress}\n          />\n          {overlayIcon && (\n            <div\n              className={`${classes.overlayAction} ${\n                label !== \"\" ? \"withLabel\" : \"\"\n              }`}\n            >\n              <IconButton\n                onClick={\n                  overlayAction\n                    ? () => {\n                        overlayAction();\n                      }\n                    : () => null\n                }\n                id={overlayId}\n                size={\"small\"}\n                disableFocusRipple={false}\n                disableRipple={false}\n                disableTouchRipple={false}\n              >\n                {overlayIcon}\n              </IconButton>\n            </div>\n          )}\n          {overlayObject && (\n            <div\n              className={`${classes.overlayAction} ${\n                label !== \"\" ? \"withLabel\" : \"\"\n              }`}\n            >\n              {overlayObject}\n            </div>\n          )}\n        </div>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(InputBoxWrapper);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React from \"react\";\nimport clsx from \"clsx\";\nimport Grid from \"@mui/material/Grid\";\nimport RadioGroup from \"@mui/material/RadioGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Radio, { RadioProps } from \"@mui/material/Radio\";\nimport { InputLabel, Tooltip } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport { fieldBasic, radioIcons, tooltipHelper } from \"../common/styleLibrary\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\n\nexport interface SelectorTypes {\n  label: string;\n  value: string;\n}\n\ninterface RadioGroupProps {\n  selectorOptions: SelectorTypes[];\n  currentSelection: string;\n  label: string;\n  id: string;\n  name: string;\n  tooltip?: string;\n  disableOptions?: boolean;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  classes: any;\n  displayInColumn?: boolean;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    optionLabel: {\n      \"&.Mui-disabled\": {\n        \"& .MuiFormControlLabel-label\": {\n          color: \"#9c9c9c\",\n        },\n      },\n      \"&:last-child\": {\n        marginRight: 0,\n      },\n      \"& .MuiFormControlLabel-label\": {\n        fontSize: 12,\n        color: \"#07193E\",\n      },\n    },\n    checkedOption: {\n      \"& .MuiFormControlLabel-label\": {\n        fontSize: 12,\n        color: \"#07193E\",\n        fontWeight: 700,\n      },\n    },\n  });\n\nconst radioStyles = makeStyles({\n  root: {\n    \"&:hover\": {\n      backgroundColor: \"transparent\",\n    },\n  },\n  ...radioIcons,\n});\n\nconst RadioButton = (props: RadioProps) => {\n  const classes = radioStyles();\n\n  return (\n    <Radio\n      className={classes.root}\n      disableRipple\n      color=\"default\"\n      checkedIcon={<span className={classes.radioSelectedIcon} />}\n      icon={<span className={classes.radioUnselectedIcon} />}\n      {...props}\n    />\n  );\n};\n\nexport const RadioGroupSelector = ({\n  selectorOptions = [],\n  currentSelection,\n  label,\n  id,\n  name,\n  onChange,\n  tooltip = \"\",\n  disableOptions = false,\n  classes,\n  displayInColumn = false,\n}: RadioGroupProps) => {\n  return (\n    <Grid container alignItems={\"center\"}>\n      <Grid item xs>\n        <InputLabel htmlFor={id} className={classes.inputLabel}>\n          <span>{label}</span>\n          {tooltip !== \"\" && (\n            <div className={classes.tooltipContainer}>\n              <Tooltip title={tooltip} placement=\"top-start\">\n                <div>\n                  <HelpIcon />\n                </div>\n              </Tooltip>\n            </div>\n          )}\n        </InputLabel>\n      </Grid>\n      <Grid item xs className={classes.radioOptionsLayout}>\n        <RadioGroup\n          aria-label={id}\n          id={id}\n          name={name}\n          value={currentSelection}\n          onChange={onChange}\n          row={!displayInColumn}\n          style={{ display: \"block\", textAlign: \"right\" }}\n        >\n          {selectorOptions.map((selectorOption) => {\n            return (\n              <FormControlLabel\n                key={`rd-${name}-${selectorOption.value}`}\n                value={selectorOption.value}\n                control={<RadioButton />}\n                label={selectorOption.label}\n                disabled={disableOptions}\n                className={clsx(classes.optionLabel, {\n                  [classes.checkedOption]:\n                    selectorOption.value === currentSelection,\n                })}\n              />\n            );\n          })}\n        </RadioGroup>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default withStyles(styles)(RadioGroupSelector);\n","import React from \"react\";\nimport {\n  Button,\n  ButtonProps,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n} from \"@mui/material\";\nimport { LoadingButton } from \"@mui/lab\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { deleteDialogStyles } from \"../FormComponents/common/styleLibrary\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n  });\n\ntype ConfirmDialogProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n  onCancel?: () => void;\n  onConfirm: () => void;\n  classes?: any;\n  title: string;\n  isLoading?: boolean;\n  confirmationContent: React.ReactNode | React.ReactNode[];\n  cancelText?: string;\n  confirmText?: string;\n  confirmButtonProps?: Partial<ButtonProps>;\n  cancelButtonProps?: Partial<ButtonProps>;\n  titleIcon?: React.ReactNode;\n};\n\nconst ConfirmDialog = ({\n  isOpen = false,\n  onClose,\n  onCancel,\n  onConfirm,\n  classes = {},\n  title = \"\",\n  isLoading,\n  confirmationContent,\n  cancelText = \"Cancel\",\n  confirmText = \"Confirm\",\n  confirmButtonProps = {},\n  cancelButtonProps = {},\n  titleIcon = null,\n}: ConfirmDialogProps) => {\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n      sx={{\n        \"& .MuiPaper-root\": {\n          padding: \"1rem 2rem 2rem 1rem\",\n        },\n      }}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <DialogContent className={classes.content}>\n        {confirmationContent}\n      </DialogContent>\n      <DialogActions className={classes.actions}>\n        <Button\n          className={classes.cancelButton}\n          onClick={onCancel || onClose}\n          disabled={isLoading}\n          type=\"button\"\n          {...cancelButtonProps}\n          variant=\"outlined\"\n          color=\"primary\"\n          id={\"confirm-cancel\"}\n        >\n          {cancelText}\n        </Button>\n\n        <LoadingButton\n          className={classes.confirmButton}\n          type=\"button\"\n          onClick={onConfirm}\n          loading={isLoading}\n          disabled={isLoading}\n          variant=\"outlined\"\n          color=\"secondary\"\n          loadingPosition=\"start\"\n          startIcon={<React.Fragment />}\n          autoFocus\n          id={\"confirm-ok\"}\n          {...confirmButtonProps}\n        >\n          {confirmText}\n        </LoadingButton>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default withStyles(styles)(ConfirmDialog);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { ITenant } from \"../ListTenants/types\";\nimport {\n  ICertificateInfo,\n  ITenantEncryptionResponse,\n  ISecurityContext,\n} from \"../types\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  containerForHeader,\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  spacingUtils,\n  tenantDetailsStyles,\n  wizardCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport Paper from \"@mui/material/Paper\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../../../../store\";\nimport { setTenantDetailsLoad } from \"../actions\";\nimport api from \"../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\n\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport Grid from \"@mui/material/Grid\";\nimport FileSelector from \"../../Common/FormComponents/FileSelector/FileSelector\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport RadioGroupSelector from \"../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport { Button, DialogContentText, Typography } from \"@mui/material\";\nimport Chip from \"@mui/material/Chip\";\nimport Moment from \"react-moment\";\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\nimport { KeyPair } from \"../ListTenants/utils\";\nimport { clearValidationError } from \"../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../utils/validationFunctions\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\n\ninterface ITenantEncryption {\n  classes: any;\n  loadingTenant: boolean;\n  tenant: ITenant | null;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n  setTenantDetailsLoad: typeof setTenantDetailsLoad;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    ...spacingUtils,\n    loaderAlign: {\n      textAlign: \"center\",\n    },\n    title: {\n      marginTop: 35,\n    },\n    bold: { fontWeight: \"bold\" },\n    italic: { fontStyle: \"italic\" },\n    paperContainer: {\n      padding: \"15px 15px 15px 50px\",\n    },\n    certificateInfo: {\n      height: \"auto\",\n      margin: 5,\n    },\n    fileItem: {\n      marginRight: 10,\n      display: \"flex\",\n      \"& div label\": {\n        minWidth: 50,\n      },\n\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    certInputRow: {\n      display: \"flex\",\n      alignItems: \"center\",\n      borderBottom: \"1px solid #eaeaea\",\n      marginBottom: 10,\n    },\n    caCertsRow: {\n      borderBottom: \"1px solid #eaeaea\",\n      display: \"flex\",\n      alignItems: \"center\",\n      marginBottom: 10,\n    },\n    ...containerForHeader(theme.spacing(4)),\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst TenantEncryption = ({\n  classes,\n  tenant,\n  setErrorSnackMessage,\n}: ITenantEncryption) => {\n  const [encryptionEnabled, setEncryptionEnabled] = useState<boolean>(false);\n  const [encryptionType, setEncryptionType] = useState<string>(\"vault\");\n  const [replicas, setReplicas] = useState<string>(\"2\");\n  const [image, setImage] = useState<string>(\"\");\n  const [refreshEncryptionInfo, setRefreshEncryptionInfo] =\n    useState<boolean>(false);\n  const [securityContext, setSecurityContext] = useState<ISecurityContext>({\n    fsGroup: \"1000\",\n    runAsGroup: \"1000\",\n    runAsNonRoot: true,\n    runAsUser: \"1000\",\n  });\n  const [vaultConfiguration, setVaultConfiguration] = useState<any>(null);\n  const [awsConfiguration, setAWSConfiguration] = useState<any>(null);\n  const [gemaltoConfiguration, setGemaltoConfiguration] = useState<any>(null);\n  const [azureConfiguration, setAzureConfiguration] = useState<any>(null);\n  const [gcpConfiguration, setGCPConfiguration] = useState<any>(null);\n  const [enabledCustomCertificates, setEnabledCustomCertificates] =\n    useState<boolean>(false);\n  const [updatingEncryption, setUpdatingEncryption] = useState<boolean>(false);\n  const [serverTLSCertificateSecret, setServerTLSCertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [mTLSCertificateSecret, setMTLSCertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [mTLSCertificate, setMTLSCertificate] = useState<KeyPair | null>(null);\n  const [certificatesToBeRemoved, setCertificatesToBeRemoved] = useState<\n    string[]\n  >([]);\n  const [showVaultAppRoleID, setShowVaultAppRoleID] = useState<boolean>(false);\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n  const [showVaultAppRoleSecret, setShowVaultAppRoleSecret] =\n    useState<boolean>(false);\n  const [vaultClientCertificateSecret, setVaultClientCertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [vaultCACertificateSecret, setVaultCACertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [vaultClientCertificate, setVaultClientCertificate] =\n    useState<KeyPair | null>(null);\n  const [serverCertificate, setServerCertificate] = useState<KeyPair | null>(\n    null\n  );\n  const [vaultCACertificate, setVaultCACertificate] = useState<KeyPair | null>(\n    null\n  );\n  const [gemaltoCACertificateSecret, setGemaltoCACertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [gemaltoCACertificate, setGemaltotCACertificate] =\n    useState<KeyPair | null>(null);\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n  const [confirmOpen, setConfirmOpen] = useState<boolean>(false);\n\n  // Validation\n  useEffect(() => {\n    let encryptionValidation: IValidation[] = [];\n\n    if (encryptionEnabled) {\n      encryptionValidation = [\n        ...encryptionValidation,\n        {\n          fieldKey: \"replicas\",\n          required: true,\n          value: replicas,\n          customValidation: parseInt(replicas) < 1,\n          customValidationMessage: \"Replicas needs to be 1 or greater\",\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsUser\",\n          required: true,\n          value: securityContext.runAsUser,\n          customValidation:\n            securityContext.runAsUser === \"\" ||\n            parseInt(securityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsGroup\",\n          required: true,\n          value: securityContext.runAsGroup,\n          customValidation:\n            securityContext.runAsGroup === \"\" ||\n            parseInt(securityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_fsGroup\",\n          required: true,\n          value: securityContext.fsGroup,\n          customValidation:\n            securityContext.fsGroup === \"\" ||\n            parseInt(securityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n\n      if (enabledCustomCertificates) {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"serverKey\",\n            required: false,\n            value: serverCertificate?.encoded_key || \"\",\n          },\n          {\n            fieldKey: \"serverCert\",\n            required: false,\n            value: serverCertificate?.encoded_cert || \"\",\n          },\n          {\n            fieldKey: \"clientKey\",\n            required: false,\n            value: mTLSCertificate?.encoded_key || \"\",\n          },\n          {\n            fieldKey: \"clientCert\",\n            required: false,\n            value: mTLSCertificate?.encoded_cert || \"\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"vault\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"vault_endpoint\",\n            required: true,\n            value: vaultConfiguration?.endpoint,\n          },\n          {\n            fieldKey: \"vault_id\",\n            required: true,\n            value: vaultConfiguration?.approle?.id,\n          },\n          {\n            fieldKey: \"vault_secret\",\n            required: true,\n            value: vaultConfiguration?.approle?.secret,\n          },\n          {\n            fieldKey: \"vault_ping\",\n            required: false,\n            value: vaultConfiguration?.status?.ping,\n            customValidation: parseInt(vaultConfiguration?.status?.ping) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n          {\n            fieldKey: \"vault_retry\",\n            required: false,\n            value: vaultConfiguration?.approle?.retry,\n            customValidation: parseInt(vaultConfiguration?.approle?.retry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"aws\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"aws_endpoint\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.endpoint,\n          },\n          {\n            fieldKey: \"aws_region\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.region,\n          },\n          {\n            fieldKey: \"aws_accessKey\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.credentials?.accesskey,\n          },\n          {\n            fieldKey: \"aws_secretKey\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.credentials?.secretkey,\n          },\n        ];\n      }\n\n      if (encryptionType === \"gemalto\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"gemalto_endpoint\",\n            required: true,\n            value: gemaltoConfiguration?.keysecure?.endpoint,\n          },\n          {\n            fieldKey: \"gemalto_token\",\n            required: true,\n            value: gemaltoConfiguration?.keysecure?.credentials?.token,\n          },\n          {\n            fieldKey: \"gemalto_domain\",\n            required: true,\n            value: gemaltoConfiguration?.keysecure?.credentials?.domain,\n          },\n          {\n            fieldKey: \"gemalto_retry\",\n            required: false,\n            value: gemaltoConfiguration?.keysecure?.credentials?.retry,\n            customValidation:\n              parseInt(gemaltoConfiguration?.keysecure?.credentials?.retry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"azure\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"azure_endpoint\",\n            required: true,\n            value: azureConfiguration?.keyvault?.endpoint,\n          },\n          {\n            fieldKey: \"azure_tenant_id\",\n            required: true,\n            value: azureConfiguration?.keyvault?.credentials?.tenant_id,\n          },\n          {\n            fieldKey: \"azure_client_id\",\n            required: true,\n            value: azureConfiguration?.keyvault?.credentials?.client_id,\n          },\n          {\n            fieldKey: \"azure_client_secret\",\n            required: true,\n            value: azureConfiguration?.keyvault?.credentials?.client_secret,\n          },\n        ];\n      }\n    }\n\n    const commonVal = commonFormValidation(encryptionValidation);\n\n    setIsFormValid(Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    enabledCustomCertificates,\n    encryptionEnabled,\n    encryptionType,\n    serverCertificate?.encoded_key,\n    serverCertificate?.encoded_cert,\n    mTLSCertificate?.encoded_key,\n    mTLSCertificate?.encoded_cert,\n    vaultClientCertificate?.encoded_key,\n    vaultClientCertificate?.encoded_cert,\n    vaultCACertificate?.encoded_key,\n    vaultCACertificate?.encoded_cert,\n    securityContext,\n    vaultConfiguration,\n    awsConfiguration,\n    gemaltoConfiguration,\n    azureConfiguration,\n    gcpConfiguration,\n    replicas,\n  ]);\n\n  const fetchEncryptionInfo = () => {\n    if (!refreshEncryptionInfo) {\n      setRefreshEncryptionInfo(true);\n      api\n        .invoke(\n          \"GET\",\n          `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`\n        )\n        .then((resp: ITenantEncryptionResponse) => {\n          if (resp.vault) {\n            setEncryptionType(\"vault\");\n            setVaultConfiguration(resp.vault);\n            if (resp.vault.tls) {\n              setVaultClientCertificateSecret(resp.vault.tls.crt);\n              setVaultCACertificateSecret(resp.vault.tls.ca);\n            }\n          } else if (resp.aws) {\n            setEncryptionType(\"aws\");\n            setAWSConfiguration(resp.aws);\n          } else if (resp.gemalto) {\n            setEncryptionType(\"gemalto\");\n            setGemaltoConfiguration(resp.gemalto);\n            if (resp.gemalto.keysecure.tls) {\n              setGemaltoCACertificateSecret(resp.gemalto.keysecure.tls.ca);\n            }\n          } else if (resp.gcp) {\n            setEncryptionType(\"gcp\");\n            setGCPConfiguration(resp.gcp);\n          } else if (resp.azure) {\n            setEncryptionType(\"azure\");\n            setAzureConfiguration(resp.azure);\n          }\n\n          setEncryptionEnabled(true);\n          setImage(resp.image);\n          setReplicas(resp.replicas);\n          if (resp.securityContext) {\n            setSecurityContext(resp.securityContext);\n          }\n          if (resp.server || resp.mtls_client) {\n            setEnabledCustomCertificates(true);\n          }\n          if (resp.server) {\n            setServerTLSCertificateSecret(resp.server);\n          }\n          if (resp.mtls_client) {\n            setMTLSCertificateSecret(resp.mtls_client);\n          }\n          setRefreshEncryptionInfo(false);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          console.log(err);\n          setRefreshEncryptionInfo(false);\n        });\n    }\n  };\n\n  useEffect(() => {\n    fetchEncryptionInfo();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const removeCertificate = (certificateInfo: ICertificateInfo) => {\n    setCertificatesToBeRemoved([\n      ...certificatesToBeRemoved,\n      certificateInfo.name,\n    ]);\n    if (certificateInfo.name === serverTLSCertificateSecret?.name) {\n      setServerTLSCertificateSecret(null);\n    }\n    if (certificateInfo.name === mTLSCertificateSecret?.name) {\n      setMTLSCertificateSecret(null);\n    }\n    if (certificateInfo.name === vaultClientCertificateSecret?.name) {\n      setVaultClientCertificateSecret(null);\n    }\n    if (certificateInfo.name === vaultCACertificateSecret?.name) {\n      setVaultCACertificateSecret(null);\n    }\n    if (certificateInfo.name === gemaltoCACertificateSecret?.name) {\n      setGemaltoCACertificateSecret(null);\n    }\n  };\n\n  const updateEncryptionConfiguration = () => {\n    if (encryptionEnabled) {\n      let insertEncrypt = {};\n      switch (encryptionType) {\n        case \"gemalto\":\n          let gemaltoCAIntroduce = {};\n\n          if (gemaltoCACertificate?.encoded_cert) {\n            gemaltoCAIntroduce = {\n              tls: {\n                ca: gemaltoCACertificate?.encoded_cert,\n              },\n            };\n          }\n          insertEncrypt = {\n            gemalto: {\n              keysecure: {\n                endpoint: gemaltoConfiguration?.keysecure?.endpoint || \"\",\n                credentials: {\n                  token:\n                    gemaltoConfiguration?.keysecure?.credentials?.token || \"\",\n                  domain:\n                    gemaltoConfiguration?.keysecure?.credentials?.domain || \"\",\n                  retry: parseInt(\n                    gemaltoConfiguration?.keysecure?.credentials?.retry\n                  ),\n                },\n                ...gemaltoCAIntroduce,\n              },\n            },\n          };\n          break;\n        case \"aws\":\n          insertEncrypt = {\n            aws: {\n              secretsmanager: {\n                endpoint: awsConfiguration?.secretsmanager?.endpoint || \"\",\n                region: awsConfiguration?.secretsmanager?.region || \"\",\n                kmskey: awsConfiguration?.secretsmanager?.kmskey || \"\",\n                credentials: {\n                  accesskey:\n                    awsConfiguration?.secretsmanager?.credentials?.accesskey ||\n                    \"\",\n                  secretkey:\n                    awsConfiguration?.secretsmanager?.credentials?.secretkey ||\n                    \"\",\n                  token:\n                    awsConfiguration?.secretsmanager?.credentials?.token || \"\",\n                },\n              },\n            },\n          };\n          break;\n        case \"azure\":\n          insertEncrypt = {\n            azure: {\n              keyvault: {\n                endpoint: azureConfiguration?.keyvault?.endpoint || \"\",\n                credentials: {\n                  tenant_id:\n                    azureConfiguration?.keyvault?.credentials?.tenant_id || \"\",\n                  client_id:\n                    azureConfiguration?.keyvault?.credentials?.client_id || \"\",\n                  client_secret:\n                    azureConfiguration?.keyvault?.credentials?.client_secret ||\n                    \"\",\n                },\n              },\n            },\n          };\n          break;\n        case \"gcp\":\n          insertEncrypt = {\n            gcp: {\n              secretmanager: {\n                project_id: gcpConfiguration?.secretmanager?.project_id || \"\",\n                endpoint: gcpConfiguration?.secretmanager?.endpoint || \"\",\n                credentials: {\n                  client_email:\n                    gcpConfiguration?.secretmanager?.credentials\n                      ?.client_email || \"\",\n                  client_id:\n                    gcpConfiguration?.secretmanager?.credentials?.client_id ||\n                    \"\",\n                  private_key_id:\n                    gcpConfiguration?.secretmanager?.credentials\n                      ?.private_key_id || \"\",\n                  private_key:\n                    gcpConfiguration?.secretmanager?.credentials?.private_key ||\n                    \"\",\n                },\n              },\n            },\n          };\n          break;\n        case \"vault\":\n          let vaultKeyPair = null;\n          let vaultCAInsert = null;\n          if (\n            vaultClientCertificate?.encoded_key &&\n            vaultClientCertificate?.encoded_cert\n          ) {\n            vaultKeyPair = {\n              key: vaultClientCertificate?.encoded_key,\n              crt: vaultClientCertificate?.encoded_cert,\n            };\n          }\n          if (vaultCACertificate?.encoded_cert) {\n            vaultCAInsert = {\n              ca: vaultCACertificate?.encoded_cert,\n            };\n          }\n          let vaultTLS = null;\n          if (vaultKeyPair || vaultCAInsert) {\n            vaultTLS = {\n              tls: {\n                ...vaultKeyPair,\n                ...vaultCAInsert,\n              },\n            };\n          }\n          insertEncrypt = {\n            vault: {\n              endpoint: vaultConfiguration?.endpoint || \"\",\n              engine: vaultConfiguration?.engine || \"\",\n              namespace: vaultConfiguration?.namespace || \"\",\n              prefix: vaultConfiguration?.prefix || \"\",\n              approle: {\n                engine: vaultConfiguration?.approle?.engine || \"\",\n                id: vaultConfiguration?.approle?.id || \"\",\n                secret: vaultConfiguration?.approle?.secret || \"\",\n                retry: parseInt(vaultConfiguration?.approle?.retry),\n              },\n              ...vaultTLS,\n              status: {\n                ping: parseInt(vaultConfiguration?.status?.ping),\n              },\n            },\n          };\n          break;\n      }\n\n      let encryptionServerKeyPair: any = {};\n      let encryptionClientKeyPair: any = {};\n\n      if (mTLSCertificate?.encoded_key && mTLSCertificate?.encoded_cert) {\n        encryptionClientKeyPair = {\n          client: {\n            key: mTLSCertificate?.encoded_key,\n            crt: mTLSCertificate?.encoded_cert,\n          },\n        };\n      }\n\n      if (serverCertificate?.encoded_key && serverCertificate?.encoded_cert) {\n        encryptionServerKeyPair = {\n          server: {\n            key: serverCertificate?.encoded_key,\n            crt: serverCertificate?.encoded_cert,\n          },\n        };\n      }\n      const dataSend = {\n        secretsToBeDeleted: certificatesToBeRemoved || [],\n        replicas: replicas,\n        securityContext: securityContext,\n        image: image,\n        ...encryptionClientKeyPair,\n        ...encryptionServerKeyPair,\n        ...insertEncrypt,\n      };\n      if (!updatingEncryption) {\n        setUpdatingEncryption(true);\n        api\n          .invoke(\n            \"PUT\",\n            `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`,\n            dataSend\n          )\n          .then(() => {\n            setConfirmOpen(false);\n            setUpdatingEncryption(false);\n            fetchEncryptionInfo();\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setUpdatingEncryption(false);\n            setConfirmOpen(false);\n            setErrorSnackMessage(err);\n          });\n      }\n    } else {\n      if (!updatingEncryption) {\n        setUpdatingEncryption(true);\n        api\n          .invoke(\n            \"DELETE\",\n            `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`,\n            {}\n          )\n          .then(() => {\n            fetchEncryptionInfo();\n            setUpdatingEncryption(false);\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setUpdatingEncryption(false);\n            setErrorSnackMessage(err);\n          });\n      }\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Fragment>\n        {confirmOpen && (\n          <ConfirmDialog\n            isOpen={confirmOpen}\n            title={\n              encryptionEnabled\n                ? \"Enable encryption at rest for tenant?\"\n                : \"Disable encryption at rest for tenant?\"\n            }\n            confirmText={encryptionEnabled ? \"Enable\" : \"Disable\"}\n            cancelText=\"Cancel\"\n            onClose={() => setConfirmOpen(false)}\n            onConfirm={updateEncryptionConfiguration}\n            confirmationContent={\n              <DialogContentText>\n                {encryptionEnabled\n                  ? \"Data will be encrypted using and external KMS\"\n                  : \"Current encrypted information will not be accessible\"}\n              </DialogContentText>\n            }\n          />\n        )}\n        <h1 className={classes.sectionTitle}>Encryption</h1>\n        <div className={classes.actionsTray}>\n          <FormSwitchWrapper\n            label={\"Encryption at rest\"}\n            indicatorLabels={[\"Enabled\", \"Disabled\"]}\n            checked={encryptionEnabled}\n            value={\"tenant_encryption\"}\n            id=\"tenant-encryption\"\n            name=\"tenant-encryption\"\n            onChange={(e) => {\n              setEncryptionEnabled(!encryptionEnabled);\n            }}\n            description=\"\"\n          />\n        </div>\n        {encryptionEnabled && (\n          <Paper className={classes.paperWrapper} style={{ marginBottom: 15 }}>\n            <Grid container style={{}}>\n              <Grid item xs={12} className={classes.encryptionTypeOptions}>\n                <RadioGroupSelector\n                  currentSelection={encryptionType}\n                  id=\"encryptionType\"\n                  name=\"encryptionType\"\n                  label=\"Encryption Options\"\n                  onChange={(e) => {\n                    setEncryptionType(e.target.value);\n                  }}\n                  selectorOptions={[\n                    { label: \"Vault\", value: \"vault\" },\n                    { label: \"AWS\", value: \"aws\" },\n                    { label: \"Gemalto\", value: \"gemalto\" },\n                    { label: \"GCP\", value: \"gcp\" },\n                    { label: \"Azure\", value: \"azure\" },\n                  ]}\n                />\n              </Grid>\n              {encryptionType === \"vault\" && (\n                <Fragment>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"vault_endpoint\"\n                      name=\"vault_endpoint\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                        setVaultConfiguration({\n                          ...vaultConfiguration,\n                          endpoint: e.target.value,\n                        })\n                      }\n                      label=\"Endpoint\"\n                      value={vaultConfiguration?.endpoint || \"\"}\n                      error={validationErrors[\"vault_ping\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"vault_engine\"\n                      name=\"vault_engine\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                        setVaultConfiguration({\n                          ...vaultConfiguration,\n                          engine: e.target.value,\n                        })\n                      }\n                      label=\"Engine\"\n                      value={vaultConfiguration?.engine || \"\"}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"vault_namespace\"\n                      name=\"vault_namespace\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                        setVaultConfiguration({\n                          ...vaultConfiguration,\n                          namespace: e.target.value,\n                        })\n                      }\n                      label=\"Namespace\"\n                      value={vaultConfiguration?.namespace || \"\"}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"vault_prefix\"\n                      name=\"vault_prefix\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                        setVaultConfiguration({\n                          ...vaultConfiguration,\n                          prefix: e.target.value,\n                        })\n                      }\n                      label=\"Prefix\"\n                      value={vaultConfiguration?.prefix || \"\"}\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <fieldset className={classes.fieldGroup}>\n                      <legend className={classes.descriptionText}>\n                        App Role\n                      </legend>\n                      <Grid item xs={12} className={classes.formFieldRow}>\n                        <InputBoxWrapper\n                          id=\"vault_approle_engine\"\n                          name=\"vault_approle_engine\"\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setVaultConfiguration({\n                              ...vaultConfiguration,\n                              approle: {\n                                ...vaultConfiguration?.approle,\n                                engine: e.target.value,\n                              },\n                            })\n                          }\n                          label=\"Engine\"\n                          value={vaultConfiguration?.approle?.engine || \"\"}\n                        />\n                      </Grid>\n                      <Grid item xs={12} className={classes.formFieldRow}>\n                        <InputBoxWrapper\n                          type={showVaultAppRoleID ? \"text\" : \"password\"}\n                          id=\"vault_id\"\n                          name=\"vault_id\"\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setVaultConfiguration({\n                              ...vaultConfiguration,\n                              approle: {\n                                ...vaultConfiguration?.approle,\n                                id: e.target.value,\n                              },\n                            })\n                          }\n                          label=\"AppRole ID\"\n                          value={vaultConfiguration?.approle?.id || \"\"}\n                          required\n                          error={validationErrors[\"vault_id\"] || \"\"}\n                          overlayIcon={\n                            showVaultAppRoleID ? (\n                              <VisibilityOffIcon />\n                            ) : (\n                              <RemoveRedEyeIcon />\n                            )\n                          }\n                          overlayAction={() =>\n                            setShowVaultAppRoleID(!showVaultAppRoleID)\n                          }\n                        />\n                      </Grid>\n                      <Grid item xs={12} className={classes.formFieldRow}>\n                        <InputBoxWrapper\n                          type={showVaultAppRoleSecret ? \"text\" : \"password\"}\n                          id=\"vault_secret\"\n                          name=\"vault_secret\"\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setVaultConfiguration({\n                              ...vaultConfiguration,\n                              approle: {\n                                ...vaultConfiguration?.approle,\n                                secret: e.target.value,\n                              },\n                            })\n                          }\n                          label=\"AppRole Secret\"\n                          value={vaultConfiguration?.approle?.secret || \"\"}\n                          required\n                          error={validationErrors[\"vault_secret\"] || \"\"}\n                          overlayIcon={\n                            showVaultAppRoleSecret ? (\n                              <VisibilityOffIcon />\n                            ) : (\n                              <RemoveRedEyeIcon />\n                            )\n                          }\n                          overlayAction={() =>\n                            setShowVaultAppRoleSecret(!showVaultAppRoleSecret)\n                          }\n                        />\n                      </Grid>\n                      <Grid item xs={12} className={classes.formFieldRow}>\n                        <InputBoxWrapper\n                          type=\"number\"\n                          min=\"0\"\n                          id=\"vault_retry\"\n                          name=\"vault_retry\"\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setVaultConfiguration({\n                              ...vaultConfiguration,\n                              approle: {\n                                ...vaultConfiguration?.approle,\n                                retry: e.target.value,\n                              },\n                            })\n                          }\n                          label=\"Retry (Seconds)\"\n                          error={validationErrors[\"vault_retry\"] || \"\"}\n                          value={vaultConfiguration?.approle?.retry || \"\"}\n                        />\n                      </Grid>\n                    </fieldset>\n                  </Grid>\n                  <Grid container className={classes.mutualTlsConfig}>\n                    <fieldset className={classes.fieldGroup}>\n                      <legend className={classes.descriptionText}>\n                        Mutual TLS authentication with KMS (optional)\n                      </legend>\n                      {vaultClientCertificateSecret ? (\n                        <Chip\n                          key={vaultClientCertificateSecret.name}\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          className={classes.certificateInfo}\n                          label={\n                            <div>\n                              <Typography\n                                variant=\"subtitle1\"\n                                display=\"block\"\n                                gutterBottom\n                              >\n                                {vaultClientCertificateSecret.name}\n                              </Typography>\n                              <Typography\n                                className={classes.italic}\n                                variant=\"caption\"\n                                display=\"block\"\n                                gutterBottom\n                              >\n                                {vaultClientCertificateSecret.domains &&\n                                  vaultClientCertificateSecret.domains.map(\n                                    (dom) => {\n                                      return <div>{dom}</div>;\n                                    }\n                                  )}\n                              </Typography>\n                              <Typography\n                                className={classes.bold}\n                                variant=\"overline\"\n                                gutterBottom\n                              >\n                                Expiry:&nbsp;\n                              </Typography>\n                              <Typography variant=\"caption\" gutterBottom>\n                                <Moment format=\"YYYY-MM-DD\">\n                                  {vaultClientCertificateSecret.expiry}\n                                </Moment>\n                              </Typography>\n                            </div>\n                          }\n                          onDelete={() =>\n                            removeCertificate(vaultClientCertificateSecret)\n                          }\n                        />\n                      ) : (\n                        <Fragment>\n                          <FileSelector\n                            onChange={(encodedValue, fileName) =>\n                              setVaultClientCertificate({\n                                encoded_key: encodedValue || \"\",\n                                id: vaultClientCertificate?.id || \"\",\n                                key: fileName || \"\",\n                                cert: vaultClientCertificate?.cert || \"\",\n                                encoded_cert:\n                                  vaultClientCertificate?.encoded_cert || \"\",\n                              })\n                            }\n                            accept=\".key,.pem\"\n                            id=\"vault_key\"\n                            name=\"vault_key\"\n                            label=\"Key\"\n                            value={vaultClientCertificate?.key || \"\"}\n                          />\n                          <FileSelector\n                            onChange={(encodedValue, fileName) =>\n                              setVaultClientCertificate({\n                                encoded_key:\n                                  vaultClientCertificate?.encoded_key || \"\",\n                                id: vaultClientCertificate?.id || \"\",\n                                key: vaultClientCertificate?.key || \"\",\n                                cert: fileName || \"\",\n                                encoded_cert: encodedValue || \"\",\n                              })\n                            }\n                            accept=\".cer,.crt,.cert,.pem\"\n                            id=\"vault_cert\"\n                            name=\"vault_cert\"\n                            label=\"Cert\"\n                            value={vaultClientCertificate?.cert || \"\"}\n                          />\n                        </Fragment>\n                      )}\n                    </fieldset>\n                    <fieldset className={classes.fieldGroup}>\n                      <legend className={classes.descriptionText}>\n                        KMS CA certificate (optional)\n                      </legend>\n                      {vaultCACertificateSecret ? (\n                        <Chip\n                          key={vaultCACertificateSecret.name}\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          className={classes.certificateInfo}\n                          label={\n                            <div>\n                              <Typography\n                                variant=\"subtitle1\"\n                                display=\"block\"\n                                gutterBottom\n                              >\n                                {vaultCACertificateSecret.name}\n                              </Typography>\n                              <Typography\n                                className={classes.italic}\n                                variant=\"caption\"\n                                display=\"block\"\n                                gutterBottom\n                              >\n                                {vaultCACertificateSecret.domains &&\n                                  vaultCACertificateSecret.domains.map(\n                                    (dom) => {\n                                      return <div>{dom}</div>;\n                                    }\n                                  )}\n                              </Typography>\n                              <Typography\n                                className={classes.bold}\n                                variant=\"overline\"\n                                gutterBottom\n                              >\n                                Expiry:&nbsp;\n                              </Typography>\n                              <Typography variant=\"caption\" gutterBottom>\n                                <Moment format=\"YYYY-MM-DD\">\n                                  {vaultCACertificateSecret.expiry}\n                                </Moment>\n                              </Typography>\n                            </div>\n                          }\n                          onDelete={() =>\n                            removeCertificate(vaultCACertificateSecret)\n                          }\n                        />\n                      ) : (\n                        <FileSelector\n                          onChange={(encodedValue, fileName) =>\n                            setVaultCACertificate({\n                              encoded_key:\n                                vaultCACertificate?.encoded_key || \"\",\n                              id: vaultCACertificate?.id || \"\",\n                              key: vaultCACertificate?.key || \"\",\n                              cert: fileName || \"\",\n                              encoded_cert: encodedValue || \"\",\n                            })\n                          }\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"vault_ca\"\n                          name=\"vault_ca\"\n                          label=\"CA\"\n                          value={vaultCACertificate?.cert || \"\"}\n                        />\n                      )}\n                    </fieldset>\n                  </Grid>\n                  <Grid\n                    item\n                    xs={12}\n                    className={classes.formFieldRow}\n                    style={{ marginTop: 15 }}\n                  >\n                    <fieldset className={classes.fieldGroup}>\n                      <legend className={classes.descriptionText}>\n                        Status\n                      </legend>\n                      <InputBoxWrapper\n                        type=\"number\"\n                        min=\"0\"\n                        id=\"vault_ping\"\n                        name=\"vault_ping\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            status: {\n                              ...vaultConfiguration?.status,\n                              ping: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Ping (Seconds)\"\n                        error={validationErrors[\"vault_ping\"] || \"\"}\n                        value={vaultConfiguration?.status?.ping || \"\"}\n                      />\n                    </fieldset>\n                  </Grid>\n                </Fragment>\n              )}\n              {encryptionType === \"azure\" && (\n                <Fragment>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"azure_endpoint\"\n                      name=\"azure_endpoint\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                        setAzureConfiguration({\n                          ...azureConfiguration,\n                          keyvault: {\n                            ...azureConfiguration?.keyvault,\n                            endpoint: e.target.value,\n                          },\n                        })\n                      }\n                      label=\"Endpoint\"\n                      error={validationErrors[\"azure_endpoint\"] || \"\"}\n                      value={azureConfiguration?.keyvault?.endpoint || \"\"}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <fieldset className={classes.fieldGroup}>\n                      <legend className={classes.descriptionText}>\n                        Credentials\n                      </legend>\n                      <Grid item xs={12} className={classes.formFieldRow}>\n                        <InputBoxWrapper\n                          id=\"azure_tenant_id\"\n                          name=\"azure_tenant_id\"\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setAzureConfiguration({\n                              ...azureConfiguration,\n                              keyvault: {\n                                ...azureConfiguration?.keyvault,\n                                credentials: {\n                                  ...azureConfiguration?.keyvault?.credentials,\n                                  tenant_id: e.target.value,\n                                },\n                              },\n                            })\n                          }\n                          label=\"Tenant ID\"\n                          value={\n                            azureConfiguration?.keyvault?.credentials\n                              ?.tenant_id || \"\"\n                          }\n                          error={validationErrors[\"azure_tenant_id\"] || \"\"}\n                        />\n                      </Grid>\n                      <Grid item xs={12} className={classes.formFieldRow}>\n                        <InputBoxWrapper\n                          id=\"azure_client_id\"\n                          name=\"azure_client_id\"\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setAzureConfiguration({\n                              ...azureConfiguration,\n                              keyvault: {\n                                ...azureConfiguration?.keyvault,\n                                credentials: {\n                                  ...azureConfiguration?.keyvault?.credentials,\n                                  client_id: e.target.value,\n                                },\n                              },\n                            })\n                          }\n                          label=\"Client ID\"\n                          value={\n                            azureConfiguration?.keyvault?.credentials\n                              ?.client_id || \"\"\n                          }\n                          error={validationErrors[\"azure_client_id\"] || \"\"}\n                        />\n                      </Grid>\n                      <Grid item xs={12} className={classes.formFieldRow}>\n                        <InputBoxWrapper\n                          id=\"azure_client_secret\"\n                          name=\"azure_client_secret\"\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setAzureConfiguration({\n                              ...azureConfiguration,\n                              keyvault: {\n                                ...azureConfiguration?.keyvault,\n                                credentials: {\n                                  ...azureConfiguration?.keyvault?.credentials,\n                                  client_secret: e.target.value,\n                                },\n                              },\n                            })\n                          }\n                          label=\"Client Secret\"\n                          value={\n                            azureConfiguration?.keyvault?.credentials\n                              ?.client_secret || \"\"\n                          }\n                          error={validationErrors[\"azure_client_secret\"] || \"\"}\n                        />\n                      </Grid>\n                    </fieldset>\n                  </Grid>\n                </Fragment>\n              )}\n              {encryptionType === \"gcp\" && (\n                <Fragment>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gcp_project_id\"\n                      name=\"gcp_project_id\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                        setGCPConfiguration({\n                          ...gcpConfiguration,\n                          secretmanager: {\n                            ...gcpConfiguration?.secretmanager,\n                            project_id: e.target.value,\n                          },\n                        })\n                      }\n                      label=\"Project ID\"\n                      value={gcpConfiguration?.secretmanager.project_id || \"\"}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gcp_endpoint\"\n                      name=\"gcp_endpoint\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                        setGCPConfiguration({\n                          ...gcpConfiguration,\n                          secretmanager: {\n                            ...gcpConfiguration?.secretmanager,\n                            endpoint: e.target.value,\n                          },\n                        })\n                      }\n                      label=\"Endpoint\"\n                      value={gcpConfiguration?.secretmanager.endpoint || \"\"}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <fieldset className={classes.fieldGroup}>\n                      <legend className={classes.descriptionText}>\n                        Credentials\n                      </legend>\n                      <Grid item xs={12} className={classes.formFieldRow}>\n                        <InputBoxWrapper\n                          id=\"gcp_client_email\"\n                          name=\"gcp_client_email\"\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setGCPConfiguration({\n                              ...gcpConfiguration,\n                              secretmanager: {\n                                ...gcpConfiguration?.secretmanager,\n                                credentials: {\n                                  ...gcpConfiguration?.secretmanager\n                                    .credentials,\n                                  client_email: e.target.value,\n                                },\n                              },\n                            })\n                          }\n                          label=\"Client Email\"\n                          value={\n                            gcpConfiguration?.secretmanager.credentials\n                              ?.client_email || \"\"\n                          }\n                        />\n                      </Grid>\n                      <Grid item xs={12} className={classes.formFieldRow}>\n                        <InputBoxWrapper\n                          id=\"gcp_client_id\"\n                          name=\"gcp_client_id\"\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setGCPConfiguration({\n                              ...gcpConfiguration,\n                              secretmanager: {\n                                ...gcpConfiguration?.secretmanager,\n                                credentials: {\n                                  ...gcpConfiguration?.secretmanager\n                                    .credentials,\n                                  client_id: e.target.value,\n                                },\n                              },\n                            })\n                          }\n                          label=\"Client ID\"\n                          value={\n                            gcpConfiguration?.secretmanager.credentials\n                              ?.client_id || \"\"\n                          }\n                        />\n                      </Grid>\n                      <Grid item xs={12} className={classes.formFieldRow}>\n                        <InputBoxWrapper\n                          id=\"gcp_private_key_id\"\n                          name=\"gcp_private_key_id\"\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setGCPConfiguration({\n                              ...gcpConfiguration,\n                              secretmanager: {\n                                ...gcpConfiguration?.secretmanager,\n                                credentials: {\n                                  ...gcpConfiguration?.secretmanager\n                                    .credentials,\n                                  private_key_id: e.target.value,\n                                },\n                              },\n                            })\n                          }\n                          label=\"Private Key ID\"\n                          value={\n                            gcpConfiguration?.secretmanager.credentials\n                              ?.private_key_id || \"\"\n                          }\n                        />\n                      </Grid>\n                      <Grid item xs={12} className={classes.formFieldRow}>\n                        <InputBoxWrapper\n                          id=\"gcp_private_key\"\n                          name=\"gcp_private_key\"\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setGCPConfiguration({\n                              ...gcpConfiguration,\n                              secretmanager: {\n                                ...gcpConfiguration?.secretmanager,\n                                credentials: {\n                                  ...gcpConfiguration?.secretmanager\n                                    .credentials,\n                                  private_key: e.target.value,\n                                },\n                              },\n                            })\n                          }\n                          label=\"Private Key\"\n                          value={\n                            gcpConfiguration?.secretmanager.credentials\n                              ?.private_key || \"\"\n                          }\n                        />\n                      </Grid>\n                    </fieldset>\n                  </Grid>\n                </Fragment>\n              )}\n              {encryptionType === \"aws\" && (\n                <Fragment>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"aws_endpoint\"\n                      name=\"aws_endpoint\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                        setAWSConfiguration({\n                          ...awsConfiguration,\n                          secretsmanager: {\n                            ...awsConfiguration?.secretsmanager,\n                            endpoint: e.target.value,\n                          },\n                        })\n                      }\n                      label=\"Endpoint\"\n                      value={awsConfiguration?.secretsmanager?.endpoint || \"\"}\n                      required\n                      error={validationErrors[\"aws_endpoint\"] || \"\"}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"aws_region\"\n                      name=\"aws_region\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                        setAWSConfiguration({\n                          ...awsConfiguration,\n                          secretsmanager: {\n                            ...awsConfiguration?.secretsmanager,\n                            region: e.target.value,\n                          },\n                        })\n                      }\n                      label=\"Region\"\n                      value={awsConfiguration?.secretsmanager?.region || \"\"}\n                      error={validationErrors[\"aws_region\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"aws_kmsKey\"\n                      name=\"aws_kmsKey\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                        setAWSConfiguration({\n                          ...awsConfiguration,\n                          secretsmanager: {\n                            ...awsConfiguration?.secretsmanager,\n                            kmskey: e.target.value,\n                          },\n                        })\n                      }\n                      label=\"KMS Key\"\n                      value={awsConfiguration?.secretsmanager?.kmskey || \"\"}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <fieldset className={classes.fieldGroup}>\n                      <legend className={classes.descriptionText}>\n                        Credentials\n                      </legend>\n                      <Grid item xs={12} className={classes.formFieldRow}>\n                        <InputBoxWrapper\n                          id=\"aws_accessKey\"\n                          name=\"aws_accessKey\"\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setAWSConfiguration({\n                              ...awsConfiguration,\n                              secretsmanager: {\n                                ...awsConfiguration?.secretsmanager,\n                                credentials: {\n                                  ...awsConfiguration?.secretsmanager\n                                    ?.credentials,\n                                  accesskey: e.target.value,\n                                },\n                              },\n                            })\n                          }\n                          label=\"Access Key\"\n                          value={\n                            awsConfiguration?.secretsmanager?.credentials\n                              ?.accesskey || \"\"\n                          }\n                          error={validationErrors[\"aws_accessKey\"] || \"\"}\n                          required\n                        />\n                      </Grid>\n                      <Grid item xs={12} className={classes.formFieldRow}>\n                        <InputBoxWrapper\n                          id=\"aws_secretKey\"\n                          name=\"aws_secretKey\"\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setAWSConfiguration({\n                              ...awsConfiguration,\n                              secretsmanager: {\n                                ...awsConfiguration?.secretsmanager,\n                                credentials: {\n                                  ...awsConfiguration?.secretsmanager\n                                    ?.credentials,\n                                  secretkey: e.target.value,\n                                },\n                              },\n                            })\n                          }\n                          label=\"Secret Key\"\n                          value={\n                            awsConfiguration?.secretsmanager?.credentials\n                              ?.secretkey || \"\"\n                          }\n                          error={validationErrors[\"aws_secretKey\"] || \"\"}\n                          required\n                        />\n                      </Grid>\n                      <Grid item xs={12} className={classes.formFieldRow}>\n                        <InputBoxWrapper\n                          id=\"aws_token\"\n                          name=\"aws_token\"\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setAWSConfiguration({\n                              ...awsConfiguration,\n                              secretsmanager: {\n                                ...awsConfiguration?.secretsmanager,\n                                credentials: {\n                                  ...awsConfiguration?.secretsmanager\n                                    ?.credentials,\n                                  token: e.target.value,\n                                },\n                              },\n                            })\n                          }\n                          label=\"Token\"\n                          value={\n                            awsConfiguration?.secretsmanager?.credentials\n                              ?.token || \"\"\n                          }\n                        />\n                      </Grid>\n                    </fieldset>\n                  </Grid>\n                </Fragment>\n              )}\n              {encryptionType === \"gemalto\" && (\n                <Fragment>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gemalto_endpoint\"\n                      name=\"gemalto_endpoint\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                        setGemaltoConfiguration({\n                          ...gemaltoConfiguration,\n                          keysecure: {\n                            ...gemaltoConfiguration?.keysecure,\n                            endpoint: e.target.value,\n                          },\n                        })\n                      }\n                      label=\"Endpoint\"\n                      value={gemaltoConfiguration?.keysecure?.endpoint || \"\"}\n                      error={validationErrors[\"gemalto_endpoint\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid\n                    item\n                    xs={12}\n                    style={{\n                      marginBottom: 15,\n                    }}\n                  >\n                    <fieldset className={classes.fieldGroup}>\n                      <legend className={classes.descriptionText}>\n                        Credentials\n                      </legend>\n                      <Grid item xs={12} className={classes.formFieldRow}>\n                        <InputBoxWrapper\n                          id=\"gemalto_token\"\n                          name=\"gemalto_token\"\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setGemaltoConfiguration({\n                              ...gemaltoConfiguration,\n                              keysecure: {\n                                ...gemaltoConfiguration?.keysecure,\n                                credentials: {\n                                  ...gemaltoConfiguration?.keysecure\n                                    ?.credentials,\n                                  token: e.target.value,\n                                },\n                              },\n                            })\n                          }\n                          label=\"Token\"\n                          value={\n                            gemaltoConfiguration?.keysecure?.credentials\n                              ?.token || \"\"\n                          }\n                          error={validationErrors[\"gemalto_token\"] || \"\"}\n                          required\n                        />\n                      </Grid>\n                      <Grid item xs={12} className={classes.formFieldRow}>\n                        <InputBoxWrapper\n                          id=\"gemalto_domain\"\n                          name=\"gemalto_domain\"\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setGemaltoConfiguration({\n                              ...gemaltoConfiguration,\n                              keysecure: {\n                                ...gemaltoConfiguration?.keysecure,\n                                credentials: {\n                                  ...gemaltoConfiguration?.keysecure\n                                    ?.credentials,\n                                  domain: e.target.value,\n                                },\n                              },\n                            })\n                          }\n                          label=\"Domain\"\n                          value={\n                            gemaltoConfiguration?.keysecure?.credentials\n                              ?.domain || \"\"\n                          }\n                          error={validationErrors[\"gemalto_domain\"] || \"\"}\n                          required\n                        />\n                      </Grid>\n                      <Grid item xs={12} className={classes.formFieldRow}>\n                        <InputBoxWrapper\n                          type=\"number\"\n                          min=\"0\"\n                          id=\"gemalto_retry\"\n                          name=\"gemalto_retry\"\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setGemaltoConfiguration({\n                              ...gemaltoConfiguration,\n                              keysecure: {\n                                ...gemaltoConfiguration?.keysecure,\n                                credentials: {\n                                  ...gemaltoConfiguration?.keysecure\n                                    ?.credentials,\n                                  retry: e.target.value,\n                                },\n                              },\n                            })\n                          }\n                          label=\"Retry (seconds)\"\n                          value={\n                            gemaltoConfiguration?.keysecure?.credentials\n                              ?.retry || \"\"\n                          }\n                          error={validationErrors[\"gemalto_retry\"] || \"\"}\n                        />\n                      </Grid>\n                    </fieldset>\n                  </Grid>\n                  <Grid\n                    item\n                    xs={12}\n                    style={{\n                      marginBottom: 15,\n                    }}\n                  >\n                    <fieldset className={classes.fieldGroup}>\n                      <legend className={classes.descriptionText}>\n                        Custom CA Root certificate verification\n                      </legend>\n                      <FileSelector\n                        onChange={(encodedValue, fileName) => {}}\n                        accept=\".cer,.crt,.cert,.pem\"\n                        id=\"gemalto_ca\"\n                        name=\"gemalto_ca\"\n                        label=\"CA\"\n                        value={\"\"}\n                      />\n                      {gemaltoCACertificateSecret ? (\n                        <Chip\n                          key={gemaltoCACertificateSecret.name}\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          className={classes.certificateInfo}\n                          label={\n                            <div>\n                              <Typography\n                                variant=\"subtitle1\"\n                                display=\"block\"\n                                gutterBottom\n                              >\n                                {gemaltoCACertificateSecret.name}\n                              </Typography>\n                              <Typography\n                                className={classes.italic}\n                                variant=\"caption\"\n                                display=\"block\"\n                                gutterBottom\n                              >\n                                {gemaltoCACertificateSecret.domains &&\n                                  gemaltoCACertificateSecret.domains.map(\n                                    (dom) => {\n                                      return <div>{dom}</div>;\n                                    }\n                                  )}\n                              </Typography>\n                              <Typography\n                                className={classes.bold}\n                                variant=\"overline\"\n                                gutterBottom\n                              >\n                                Expiry:&nbsp;\n                              </Typography>\n                              <Typography variant=\"caption\" gutterBottom>\n                                <Moment format=\"YYYY-MM-DD\">\n                                  {gemaltoCACertificateSecret.expiry}\n                                </Moment>\n                              </Typography>\n                            </div>\n                          }\n                          onDelete={() =>\n                            removeCertificate(gemaltoCACertificateSecret)\n                          }\n                        />\n                      ) : (\n                        <FileSelector\n                          onChange={(encodedValue, fileName) =>\n                            setGemaltotCACertificate({\n                              encoded_key:\n                                gemaltoCACertificate?.encoded_key || \"\",\n                              id: gemaltoCACertificate?.id || \"\",\n                              key: gemaltoCACertificate?.key || \"\",\n                              cert: fileName || \"\",\n                              encoded_cert: encodedValue || \"\",\n                            })\n                          }\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"gemalto_ca\"\n                          name=\"gemalto_ca\"\n                          label=\"CA\"\n                          value={gemaltoCACertificate?.cert || \"\"}\n                        />\n                      )}\n                    </fieldset>\n                  </Grid>\n                </Fragment>\n              )}\n              <div className={classes.headerElement}>\n                <h4 className={classes.h3Section}>Additional Configurations</h4>\n              </div>\n              <Grid item xs={12}>\n                <FormSwitchWrapper\n                  value=\"enableCustomCertsForKES\"\n                  id=\"enableCustomCertsForKES\"\n                  name=\"enableCustomCertsForKES\"\n                  checked={enabledCustomCertificates}\n                  onChange={(e) =>\n                    setEnabledCustomCertificates(!enabledCustomCertificates)\n                  }\n                  label={\"Custom Certificates\"}\n                />\n              </Grid>\n              {enabledCustomCertificates && (\n                <Fragment>\n                  <Grid container>\n                    <Grid item xs={12} style={{ marginBottom: 15 }}>\n                      <fieldset className={classes.fieldGroup}>\n                        <legend className={classes.descriptionText}>\n                          Encryption Service Certificates\n                        </legend>\n                        {serverTLSCertificateSecret ? (\n                          <Chip\n                            key={serverTLSCertificateSecret.name}\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            className={classes.certificateInfo}\n                            label={\n                              <div>\n                                <Typography\n                                  variant=\"subtitle1\"\n                                  display=\"block\"\n                                  gutterBottom\n                                >\n                                  {serverTLSCertificateSecret.name}\n                                </Typography>\n                                <Typography\n                                  className={classes.italic}\n                                  variant=\"caption\"\n                                  display=\"block\"\n                                  gutterBottom\n                                >\n                                  {serverTLSCertificateSecret.domains &&\n                                    serverTLSCertificateSecret.domains.map(\n                                      (dom) => {\n                                        return <div>{dom}</div>;\n                                      }\n                                    )}\n                                </Typography>\n                                <Typography\n                                  className={classes.bold}\n                                  variant=\"overline\"\n                                  gutterBottom\n                                >\n                                  Expiry:&nbsp;\n                                </Typography>\n                                <Typography variant=\"caption\" gutterBottom>\n                                  <Moment format=\"YYYY-MM-DD\">\n                                    {serverTLSCertificateSecret.expiry}\n                                  </Moment>\n                                </Typography>\n                              </div>\n                            }\n                            onDelete={() =>\n                              removeCertificate(serverTLSCertificateSecret)\n                            }\n                          />\n                        ) : (\n                          <Fragment>\n                            <FileSelector\n                              onChange={(encodedValue, fileName) => {\n                                setServerCertificate({\n                                  encoded_key: encodedValue || \"\",\n                                  id: serverCertificate?.id || \"\",\n                                  key: fileName || \"\",\n                                  cert: serverCertificate?.cert || \"\",\n                                  encoded_cert:\n                                    serverCertificate?.encoded_cert || \"\",\n                                });\n                                cleanValidation(\"serverKey\");\n                              }}\n                              accept=\".key,.pem\"\n                              id=\"serverKey\"\n                              name=\"serverKey\"\n                              label=\"Key\"\n                              value={serverCertificate?.key}\n                            />\n                            <FileSelector\n                              onChange={(encodedValue, fileName) => {\n                                setServerCertificate({\n                                  encoded_key:\n                                    serverCertificate?.encoded_key || \"\",\n                                  id: serverCertificate?.id || \"\",\n                                  key: serverCertificate?.key || \"\",\n                                  cert: fileName || \"\",\n                                  encoded_cert: encodedValue || \"\",\n                                });\n                                cleanValidation(\"serverCert\");\n                              }}\n                              accept=\".cer,.crt,.cert,.pem\"\n                              id=\"serverCert\"\n                              name=\"serverCert\"\n                              label=\"Cert\"\n                              value={serverCertificate?.cert}\n                            />\n                          </Fragment>\n                        )}\n                      </fieldset>\n                    </Grid>\n                  </Grid>\n                  <Grid container style={{ marginBottom: 15 }}>\n                    <Grid item xs={12}>\n                      <fieldset className={classes.fieldGroup}>\n                        <legend className={classes.descriptionText}>\n                          Mutual TLS authentication with MinIO\n                        </legend>\n                        {mTLSCertificateSecret ? (\n                          <Chip\n                            key={mTLSCertificateSecret.name}\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            className={classes.certificateInfo}\n                            label={\n                              <div>\n                                <Typography\n                                  variant=\"subtitle1\"\n                                  display=\"block\"\n                                  gutterBottom\n                                >\n                                  {mTLSCertificateSecret.name}\n                                </Typography>\n                                <Typography\n                                  className={classes.italic}\n                                  variant=\"caption\"\n                                  display=\"block\"\n                                  gutterBottom\n                                >\n                                  {mTLSCertificateSecret.domains &&\n                                    mTLSCertificateSecret.domains.map((dom) => {\n                                      return <div>{dom}</div>;\n                                    })}\n                                </Typography>\n                                <Typography\n                                  className={classes.bold}\n                                  variant=\"overline\"\n                                  gutterBottom\n                                >\n                                  Expiry:&nbsp;\n                                </Typography>\n                                <Typography variant=\"caption\" gutterBottom>\n                                  <Moment format=\"YYYY-MM-DD\">\n                                    {mTLSCertificateSecret.expiry}\n                                  </Moment>\n                                </Typography>\n                              </div>\n                            }\n                            onDelete={() =>\n                              removeCertificate(mTLSCertificateSecret)\n                            }\n                          />\n                        ) : (\n                          <Fragment>\n                            <FileSelector\n                              onChange={(encodedValue, fileName) => {\n                                setMTLSCertificate({\n                                  encoded_key: encodedValue || \"\",\n                                  id: mTLSCertificate?.id || \"\",\n                                  key: fileName || \"\",\n                                  cert: mTLSCertificate?.cert || \"\",\n                                  encoded_cert:\n                                    mTLSCertificate?.encoded_cert || \"\",\n                                });\n                                cleanValidation(\"clientKey\");\n                              }}\n                              accept=\".key,.pem\"\n                              id=\"clientKey\"\n                              name=\"clientKey\"\n                              label=\"Key\"\n                              value={mTLSCertificate?.key}\n                            />\n                            <FileSelector\n                              onChange={(encodedValue, fileName) => {\n                                setMTLSCertificate({\n                                  encoded_key:\n                                    mTLSCertificate?.encoded_key || \"\",\n                                  id: mTLSCertificate?.id || \"\",\n                                  key: mTLSCertificate?.key || \"\",\n                                  cert: fileName || \"\",\n                                  encoded_cert: encodedValue || \"\",\n                                });\n                                cleanValidation(\"clientCert\");\n                              }}\n                              accept=\".cer,.crt,.cert,.pem\"\n                              id=\"clientCert\"\n                              name=\"clientCert\"\n                              label=\"Cert\"\n                              value={mTLSCertificate?.cert}\n                            />\n                          </Fragment>\n                        )}\n                      </fieldset>\n                    </Grid>\n                  </Grid>\n                </Fragment>\n              )}\n              <Grid item xs={12}>\n                <Grid item xs={12} classes={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    type=\"text\"\n                    id=\"image\"\n                    name=\"image\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setImage(e.target.value)\n                    }\n                    label=\"Image\"\n                    placeholder=\"minio/kes:v0.17.6\"\n                    value={image}\n                  />\n                </Grid>\n                <Grid item xs={12} classes={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    min=\"1\"\n                    id=\"replicas\"\n                    name=\"replicas\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setReplicas(e.target.value)\n                    }\n                    label=\"Replicas\"\n                    value={replicas}\n                    required\n                    error={validationErrors[\"replicas\"] || \"\"}\n                  />\n                </Grid>\n\n                <fieldset\n                  className={classes.fieldGroup}\n                  style={{ marginTop: 15 }}\n                >\n                  <legend className={classes.descriptionText}>\n                    SecurityContext for KES pods\n                  </legend>\n                  <Grid item xs={12} className={classes.kesSecurityContext}>\n                    <div\n                      className={`${classes.multiContainer} ${classes.responsiveContainer}`}\n                    >\n                      <div\n                        className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                      >\n                        <InputBoxWrapper\n                          type=\"number\"\n                          id=\"kes_securityContext_runAsUser\"\n                          name=\"kes_securityContext_runAsUser\"\n                          onChange={(\n                            e: React.ChangeEvent<HTMLInputElement>\n                          ) => {\n                            setSecurityContext({\n                              ...securityContext,\n                              runAsUser: e.target.value,\n                            });\n                          }}\n                          label=\"Run As User\"\n                          value={securityContext.runAsUser}\n                          required\n                          error={\n                            validationErrors[\"kes_securityContext_runAsUser\"] ||\n                            \"\"\n                          }\n                          min=\"0\"\n                        />\n                      </div>\n                      <div\n                        className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                      >\n                        <InputBoxWrapper\n                          type=\"number\"\n                          id=\"kes_securityContext_runAsGroup\"\n                          name=\"kes_securityContext_runAsGroup\"\n                          onChange={(\n                            e: React.ChangeEvent<HTMLInputElement>\n                          ) => {\n                            setSecurityContext({\n                              ...securityContext,\n                              runAsGroup: e.target.value,\n                            });\n                          }}\n                          label=\"Run As Group\"\n                          value={securityContext.runAsGroup}\n                          required\n                          error={\n                            validationErrors[\n                              \"kes_securityContext_runAsGroup\"\n                            ] || \"\"\n                          }\n                          min=\"0\"\n                        />\n                      </div>\n                      <div\n                        className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                      >\n                        <InputBoxWrapper\n                          type=\"number\"\n                          id=\"kes_securityContext_fsGroup\"\n                          name=\"kes_securityContext_fsGroup\"\n                          onChange={(\n                            e: React.ChangeEvent<HTMLInputElement>\n                          ) => {\n                            setSecurityContext({\n                              ...securityContext,\n                              fsGroup: e.target.value,\n                            });\n                          }}\n                          label=\"FsGroup\"\n                          value={securityContext.fsGroup}\n                          required\n                          error={\n                            validationErrors[\"kes_securityContext_fsGroup\"] ||\n                            \"\"\n                          }\n                          min=\"0\"\n                        />\n                      </div>\n                    </div>\n                  </Grid>\n                  <br />\n                  <Grid item xs={12}>\n                    <div className={classes.multiContainer}>\n                      <FormSwitchWrapper\n                        value=\"kesSecurityContextRunAsNonRoot\"\n                        id=\"kes_securityContext_runAsNonRoot\"\n                        name=\"kes_securityContext_runAsNonRoot\"\n                        checked={securityContext.runAsNonRoot}\n                        onChange={(e) => {\n                          const targetD = e.target;\n                          const checked = targetD.checked;\n                          setSecurityContext({\n                            ...securityContext,\n                            runAsNonRoot: checked,\n                          });\n                        }}\n                        label={\"Do not run as Root\"}\n                      />\n                    </div>\n                  </Grid>\n                </fieldset>\n              </Grid>\n            </Grid>\n          </Paper>\n        )}\n        <Grid item xs={12} className={classes.buttonContainer}>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={!isFormValid}\n            onClick={() => setConfirmOpen(true)}\n          >\n            Save\n          </Button>\n        </Grid>\n      </Fragment>\n    </React.Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  loadingTenant: state.tenants.tenantDetails.loadingTenant,\n  selectedTenant: state.tenants.tenantDetails.currentTenant,\n  tenant: state.tenants.tenantDetails.tenantInfo,\n});\n\nconst mapDispatchToProps = {\n  setErrorSnackMessage,\n  setTenantDetailsLoad,\n};\n\nconst connector = connect(mapState, mapDispatchToProps);\n\nexport default withStyles(styles)(connector(TenantEncryption));\n","import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport { Theme } from \"@mui/material/styles\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    errorBlock: {\n      color: theme.palette?.error.main || \"#C83B51\",\n    },\n  });\n\ninterface IErrorBlockProps {\n  classes: any;\n  errorMessage: string;\n  withBreak?: boolean;\n}\n\nconst ErrorBlock = ({\n  classes,\n  errorMessage,\n  withBreak = true,\n}: IErrorBlockProps) => {\n  return (\n    <React.Fragment>\n      {withBreak && <br />}\n      <Typography component=\"p\" variant=\"body1\" className={classes.errorBlock}>\n        {errorMessage}\n      </Typography>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(ErrorBlock);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nexport interface IValidation {\n  fieldKey: string;\n  required: boolean;\n  pattern?: RegExp;\n  customPatternMessage?: string;\n  customValidation?: boolean; // The validation to trigger the error\n  customValidationMessage?: string;\n  value: string;\n}\n\nexport const commonFormValidation = (fieldsValidate: IValidation[]) => {\n  let returnErrors: any = {};\n\n  fieldsValidate.forEach((field) => {\n    if (\n      field.required &&\n      typeof field.value !== \"undefined\" &&\n      field.value.trim &&\n      field.value.trim() === \"\"\n    ) {\n      returnErrors[field.fieldKey] = \"Field cannot be empty\";\n      return;\n    }\n    // if it's not required and the value is empty, we are done here\n    if (\n      !field.required &&\n      typeof field.value !== \"undefined\" &&\n      field.value.trim &&\n      field.value.trim() === \"\"\n    ) {\n      return;\n    }\n\n    if (field.customValidation && field.customValidationMessage) {\n      returnErrors[field.fieldKey] = field.customValidationMessage;\n      return;\n    }\n\n    if (field.pattern && field.customPatternMessage) {\n      const rgx = new RegExp(field.pattern, \"g\");\n\n      if (\n        field.value &&\n        field.value.trim() !== \"\" &&\n        !field.value.match(rgx) &&\n        typeof field.value !== \"undefined\"\n      ) {\n        returnErrors[field.fieldKey] = field.customPatternMessage;\n      }\n      return;\n    }\n  });\n\n  return returnErrors;\n};\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M16.5 6v11.5c0 2.21-1.79 4-4 4s-4-1.79-4-4V5c0-1.38 1.12-2.5 2.5-2.5s2.5 1.12 2.5 2.5v10.5c0 .55-.45 1-1 1s-1-.45-1-1V6H10v9.5c0 1.38 1.12 2.5 2.5 2.5s2.5-1.12 2.5-2.5V5c0-2.21-1.79-4-4-4S7 2.79 7 5v12.5c0 3.04 2.46 5.5 5.5 5.5s5.5-2.46 5.5-5.5V6h-1.5z\"\n}), 'AttachFile');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z\"\n}), 'Cancel');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');\n\nexports.default = _default;"],"names":["withStyles","theme","createStyles","fieldBasic","tooltipHelper","valueString","maxWidth","whiteSpace","overflow","textOverflow","marginTop","fileInputField","margin","flexFlow","fileInputStyles","inputLabel","fontWeight","textBoxContainer","border","paddingLeft","label","classes","onChange","id","name","disabled","tooltip","required","error","accept","value","useState","showFileSelector","setShowSelector","Grid","item","xs","className","fieldBottom","fieldContainer","errorInField","InputLabel","htmlFor","fieldLabelError","tooltipContainer","Tooltip","title","placement","HelpIcon","type","e","fileName","get","evt","callback","file","target","files","reader","FileReader","readAsDataURL","onload","fileBase64","result","fileArray","toString","split","length","fileProcess","data","IconButton","color","component","onClick","disableRipple","disableFocusRipple","size","Cancel","ErrorBlock","errorMessage","fileReselect","AttachFile","StyledSwitch","root","width","height","padding","switchBase","transform","palette","common","white","backgroundColor","boxShadow","opacity","thumb","marginLeft","track","borderRadius","transition","transitions","create","checked","focusVisible","switchContainer","display","alignItems","justifyContent","Switch","divContainer","marginBottom","indicatorLabelOn","indicatorLabel","fontSize","fieldDescription","actionsTray","switchOnly","description","indicatorLabels","extraInputProps","switchComponent","clsx","inputProps","disableTouchRipple","container","sm","md","textAlign","inputStyles","makeStyles","inputFieldStyles","InputField","props","InputProps","flexGrow","position","overlayAction","right","top","maxHeight","autoComplete","multiline","index","placeholder","min","max","overlayId","overlayIcon","overlayObject","noLabelMinWidth","pattern","autoFocus","onKeyPress","inputBoxContainer","noMinWidthLabel","fullWidth","helperText","inputRebase","radioStyles","radioIcons","RadioButton","checkedIcon","radioSelectedIcon","icon","radioUnselectedIcon","optionLabel","marginRight","checkedOption","selectorOptions","currentSelection","disableOptions","displayInColumn","radioOptionsLayout","row","style","map","selectorOption","control","deleteDialogStyles","isOpen","onClose","onCancel","onConfirm","isLoading","confirmationContent","cancelText","confirmText","confirmButtonProps","cancelButtonProps","titleIcon","open","event","reason","sx","titleText","closeContainer","closeButton","content","actions","cancelButton","variant","confirmButton","loading","loadingPosition","startIcon","mapDispatchToProps","setErrorSnackMessage","setTenantDetailsLoad","connector","connect","state","loadingTenant","tenants","tenantDetails","selectedTenant","currentTenant","tenant","tenantInfo","tenantDetailsStyles","spacingUtils","loaderAlign","bold","italic","fontStyle","paperContainer","certificateInfo","fileItem","minWidth","certInputRow","borderBottom","caCertsRow","containerForHeader","spacing","createTenantCommon","formFieldStyles","modalBasic","wizardCommon","encryptionEnabled","setEncryptionEnabled","encryptionType","setEncryptionType","replicas","setReplicas","image","setImage","refreshEncryptionInfo","setRefreshEncryptionInfo","fsGroup","runAsGroup","runAsNonRoot","runAsUser","securityContext","setSecurityContext","vaultConfiguration","setVaultConfiguration","awsConfiguration","setAWSConfiguration","gemaltoConfiguration","setGemaltoConfiguration","azureConfiguration","setAzureConfiguration","gcpConfiguration","setGCPConfiguration","enabledCustomCertificates","setEnabledCustomCertificates","updatingEncryption","setUpdatingEncryption","serverTLSCertificateSecret","setServerTLSCertificateSecret","mTLSCertificateSecret","setMTLSCertificateSecret","mTLSCertificate","setMTLSCertificate","certificatesToBeRemoved","setCertificatesToBeRemoved","showVaultAppRoleID","setShowVaultAppRoleID","isFormValid","setIsFormValid","showVaultAppRoleSecret","setShowVaultAppRoleSecret","vaultClientCertificateSecret","setVaultClientCertificateSecret","vaultCACertificateSecret","setVaultCACertificateSecret","vaultClientCertificate","setVaultClientCertificate","serverCertificate","setServerCertificate","vaultCACertificate","setVaultCACertificate","gemaltoCACertificateSecret","setGemaltoCACertificateSecret","gemaltoCACertificate","setGemaltotCACertificate","validationErrors","setValidationErrors","cleanValidation","fieldName","clearValidationError","confirmOpen","setConfirmOpen","useEffect","encryptionValidation","fieldKey","customValidation","parseInt","customValidationMessage","encoded_key","encoded_cert","endpoint","approle","secret","status","ping","retry","secretsmanager","region","credentials","accesskey","secretkey","keysecure","token","domain","keyvault","tenant_id","client_id","client_secret","commonVal","commonFormValidation","Object","keys","fetchEncryptionInfo","api","namespace","then","resp","vault","tls","crt","ca","aws","gemalto","gcp","azure","server","mtls_client","catch","err","console","log","removeCertificate","Fragment","insertEncrypt","gemaltoCAIntroduce","kmskey","secretmanager","project_id","client_email","private_key_id","private_key","vaultKeyPair","vaultCAInsert","key","vaultTLS","engine","prefix","encryptionServerKeyPair","encryptionClientKeyPair","client","dataSend","secretsToBeDeleted","sectionTitle","paperWrapper","encryptionTypeOptions","formFieldRow","fieldGroup","descriptionText","mutualTlsConfig","gutterBottom","domains","dom","format","expiry","onDelete","encodedValue","cert","headerElement","h3Section","kesSecurityContext","multiContainer","responsiveContainer","rightSpacer","buttonContainer","errorBlock","main","withBreak","fieldsValidate","returnErrors","forEach","field","trim","customPatternMessage","rgx","RegExp","match","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}
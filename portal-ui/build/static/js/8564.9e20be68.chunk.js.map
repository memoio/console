{"version":3,"file":"static/js/8564.9e20be68.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/DeleteReplicationRule.tsx","screens/Console/Common/Hooks/useApi.tsx","screens/Console/Common/ModalWrapper/ConfirmDialog.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { DialogContentText } from \"@mui/material\";\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport useApi from \"../../Common/Hooks/useApi\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport { ConfirmDeleteIcon } from \"../../../../icons\";\nimport Grid from \"@mui/material/Grid\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\n\ninterface IDeleteReplicationProps {\n  closeDeleteModalAndRefresh: (refresh: boolean) => void;\n  deleteOpen: boolean;\n  selectedBucket: string;\n  ruleToDelete?: string;\n  remainingRules: number;\n  deleteAllRules?: boolean;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n}\n\nconst DeleteReplicationRule = ({\n  closeDeleteModalAndRefresh,\n  deleteOpen,\n  selectedBucket,\n  ruleToDelete,\n  remainingRules,\n  setErrorSnackMessage,\n  deleteAllRules = false,\n}: IDeleteReplicationProps) => {\n  const [confirmationText, setConfirmationText] = useState<string>(\"\");\n\n  const onDelSuccess = () => closeDeleteModalAndRefresh(true);\n  const onDelError = (err: ErrorResponseHandler) => setErrorSnackMessage(err);\n  const onClose = () => closeDeleteModalAndRefresh(false);\n\n  const [deleteLoading, invokeDeleteApi] = useApi(onDelSuccess, onDelError);\n\n  if (!selectedBucket) {\n    return null;\n  }\n\n  const onConfirmDelete = () => {\n    let url = `/api/v1/buckets/${selectedBucket}/replication/${ruleToDelete}`;\n\n    if (deleteAllRules || remainingRules === 1) {\n      url = `/api/v1/buckets/${selectedBucket}/delete-all-replication-rules`;\n    }\n\n    invokeDeleteApi(\"DELETE\", url);\n  };\n\n  return (\n    <ConfirmDialog\n      title={\n        deleteAllRules\n          ? \"Delete all Replication Rules\"\n          : \"Delete Replication Rule\"\n      }\n      confirmText={\"Delete\"}\n      isOpen={deleteOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={deleteLoading}\n      onConfirm={onConfirmDelete}\n      onClose={onClose}\n      confirmButtonProps={{\n        disabled: deleteAllRules && confirmationText !== \"Yes, I am sure\",\n      }}\n      confirmationContent={\n        <DialogContentText>\n          {deleteAllRules ? (\n            <Fragment>\n              Are you sure you want to remove all replication rules for bucket{\" \"}\n              <b>{selectedBucket}</b>?<br />\n              <br />\n              To continue please type <b>Yes, I am sure</b> in the box.\n              <Grid item xs={12}>\n                <InputBoxWrapper\n                  id=\"retype-tenant\"\n                  name=\"retype-tenant\"\n                  onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                    setConfirmationText(event.target.value);\n                  }}\n                  label=\"\"\n                  value={confirmationText}\n                />\n              </Grid>\n            </Fragment>\n          ) : (\n            <Fragment>\n              Are you sure you want to delete replication rule{\" \"}\n              <b>{ruleToDelete}</b>?\n            </Fragment>\n          )}\n        </DialogContentText>\n      }\n    />\n  );\n};\n\nconst mapDispatchToProps = {\n  setErrorSnackMessage,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default connector(DeleteReplicationRule);\n","import { useState } from \"react\";\nimport api from \"../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\n\ntype NoReturnFunction = (param?: any) => void;\ntype ApiMethodToInvoke = (method: string, url: string, data?: any) => void;\ntype IsApiInProgress = boolean;\n\nconst useApi = (\n  onSuccess: NoReturnFunction,\n  onError: NoReturnFunction\n): [IsApiInProgress, ApiMethodToInvoke] => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const callApi = (method: string, url: string, data?: any) => {\n    setIsLoading(true);\n    api\n      .invoke(method, url, data)\n      .then((res: any) => {\n        setIsLoading(false);\n        onSuccess(res);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setIsLoading(false);\n        onError(err);\n      });\n  };\n\n  return [isLoading, callApi];\n};\n\nexport default useApi;\n","import React from \"react\";\nimport {\n  Button,\n  ButtonProps,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n} from \"@mui/material\";\nimport { LoadingButton } from \"@mui/lab\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { deleteDialogStyles } from \"../FormComponents/common/styleLibrary\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n  });\n\ntype ConfirmDialogProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n  onCancel?: () => void;\n  onConfirm: () => void;\n  classes?: any;\n  title: string;\n  isLoading?: boolean;\n  confirmationContent: React.ReactNode | React.ReactNode[];\n  cancelText?: string;\n  confirmText?: string;\n  confirmButtonProps?: Partial<ButtonProps>;\n  cancelButtonProps?: Partial<ButtonProps>;\n  titleIcon?: React.ReactNode;\n};\n\nconst ConfirmDialog = ({\n  isOpen = false,\n  onClose,\n  onCancel,\n  onConfirm,\n  classes = {},\n  title = \"\",\n  isLoading,\n  confirmationContent,\n  cancelText = \"Cancel\",\n  confirmText = \"Confirm\",\n  confirmButtonProps = {},\n  cancelButtonProps = {},\n  titleIcon = null,\n}: ConfirmDialogProps) => {\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n      sx={{\n        \"& .MuiPaper-root\": {\n          padding: \"1rem 2rem 2rem 1rem\",\n        },\n      }}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <DialogContent className={classes.content}>\n        {confirmationContent}\n      </DialogContent>\n      <DialogActions className={classes.actions}>\n        <Button\n          className={classes.cancelButton}\n          onClick={onCancel || onClose}\n          disabled={isLoading}\n          type=\"button\"\n          {...cancelButtonProps}\n          variant=\"outlined\"\n          color=\"primary\"\n          id={\"confirm-cancel\"}\n        >\n          {cancelText}\n        </Button>\n\n        <LoadingButton\n          className={classes.confirmButton}\n          type=\"button\"\n          onClick={onConfirm}\n          loading={isLoading}\n          disabled={isLoading}\n          variant=\"outlined\"\n          color=\"secondary\"\n          loadingPosition=\"start\"\n          startIcon={<React.Fragment />}\n          autoFocus\n          id={\"confirm-ok\"}\n          {...confirmButtonProps}\n        >\n          {confirmText}\n        </LoadingButton>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default withStyles(styles)(ConfirmDialog);\n"],"names":["mapDispatchToProps","setErrorSnackMessage","connector","connect","closeDeleteModalAndRefresh","deleteOpen","selectedBucket","ruleToDelete","remainingRules","deleteAllRules","useState","confirmationText","setConfirmationText","useApi","err","deleteLoading","invokeDeleteApi","title","confirmText","isOpen","titleIcon","isLoading","onConfirm","url","onClose","confirmButtonProps","disabled","confirmationContent","Fragment","item","xs","id","name","onChange","event","target","value","label","onSuccess","onError","setIsLoading","method","data","api","then","res","catch","withStyles","theme","createStyles","deleteDialogStyles","onCancel","classes","cancelText","cancelButtonProps","open","reason","className","root","sx","padding","titleText","closeContainer","closeButton","onClick","disableRipple","size","content","actions","cancelButton","type","variant","color","confirmButton","loading","loadingPosition","startIcon","autoFocus"],"sourceRoot":""}